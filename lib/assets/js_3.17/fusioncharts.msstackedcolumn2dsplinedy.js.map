{"version":3,"sources":["webpack:///./packages/fusioncharts/msstackedcolumn2dsplinedy/index.js","webpack:///./packages/fusioncharts/viz/msstackedcolumn2dsplinedy.js","webpack:///./packages/fc-charts/src/chart/msstackedcolumn2dsplinedy/index.js","webpack:///./packages/fc-charts/src/factories/msstackedcolumn-spline-dataset.js"],"names":["name","type","requiresFusionCharts","extension","FusionCharts","addDep","MSStackedColumn2DSplineDY","Msstackedcolumn2dlinedy","stack100percent","hasLineSet","lineset","registerFactory","datasetFactory","getName","__setDefaultConfig","config","this","sDefaultDatasetType","friendlyName","defaultDatasetType","getDSdef","SplineDataset","ColumnDataset","getDSGroupdef","CartesianGroup","MSStackedColumn2DLineDy","chart","splinesetStartIndex","indices","jsonData","getFromEnv","dataset","splineSets","vCanvas","getChildren","length","setChartMessage","_lastDatasetIndex","Array","fill","map","n","j","component","i","lineSet","remove","removeLineSet"],"mappings":"gRAAA,iB,+CAIe,CACbA,KAAM,4BACNC,KAAM,UACNC,sBAAsB,EACtBC,UAAW,SAAAC,GAAY,OAAIA,EAAaC,OAAOC,gB,mGCRjD,I,EAAA,WACeC,W,mHCAf,YACA,YACA,YACA,YACA,a,cAYE,aAAe,aACb,sBACKC,gBAAkB,EACvB,EAAKC,YAAa,EAClB,EAAKC,SAAU,EACf,EAAKC,gBAAgB,UAAWC,aAAgB,CAAC,YALpC,G,gDAWfC,QAAA,WACE,MAAO,6B,EASFA,QAAP,WACE,MAAO,6B,EAOTC,mBAAA,WACE,YAAMA,mBAAN,WACA,IAAIC,EAASC,KAAKD,OAClBA,EAAOE,oBAzCG,SA0CVF,EAAOG,aA3CO,yDA4CdH,EAAOI,mBA1CI,U,EAiDbC,SAAA,SAAUpB,GACR,MAAgB,WAATA,EAAoBqB,aAAgBC,c,EAO7CC,cAAA,WACE,OAAOC,c,GAtD6BC,c,4FCEzB,SAAUC,GACvB,IAGEC,EACAC,EAJEC,EAAWH,EAAMI,WAAW,cAC9BC,EAAUF,EAASE,QACnBC,EAAaH,EAASnB,SAAW,GAIjCuB,EADSP,EAAMQ,YAAY,UAAU,GACpBA,YAAY,WAAW,GAE1C,IAAKH,GAAiC,IAAtBC,EAAWG,OAEzB,YADAT,EAAMU,mBAGR,gBAA8BV,GAC9BC,EAAsBD,EAAMX,OAAOsB,kBAAoB,EACnDL,GAAcA,EAAWG,QAC3BP,EAAUU,MAAMN,EAAWG,QAAQI,KAAKZ,GAAqBa,KAAI,SAACC,EAAGC,GACnE,OAAQD,EAAIC,MAEd,IAAA9B,gBAAeqB,EAASP,EAAMN,SAAS,UAAW,iBAAkBY,EAAWG,OAAQH,EAAYJ,IA/BnF,SAAUe,GAC5B,IACEC,EADEC,EAAUF,EAAUT,YAAY,gBAEpC,IAAKU,EAAIC,GAAWA,EAAQV,OAAS,EAAGS,GAAK,EAAGA,IAC9CC,EAAQD,GAAGE,SA6BXC,CAAcd,IApClB,gBACA","file":"fusioncharts.msstackedcolumn2dsplinedy.js","sourcesContent":["import MSStackedColumn2DSplineDY from '../viz/msstackedcolumn2dsplinedy';\n\nexport { MSStackedColumn2DSplineDY };\n\nexport default {\n  name: 'msstackedcolumn2dsplinedy',\n  type: 'package',\n  requiresFusionCharts: true,\n  extension: FusionCharts => FusionCharts.addDep(MSStackedColumn2DSplineDY)\n};\n","import Msstackedcolumn2dlinedy from '@fusioncharts/charts/src/chart/msstackedcolumn2dsplinedy';\nexport default Msstackedcolumn2dlinedy;\n","/* eslint require-jsdoc: 'error', valid-jsdoc: [\"error\", { \"requireReturn\": false }] */\nimport MSStackedColumn2DLineDy from '../msstackedcolumn2dlinedy';\nimport SplineDataset from '../../dataset/msspline';\nimport ColumnDataset from '../../dataset/column';\nimport CartesianGroup from '../../dataset/groups/cartesian-stack';\nimport datasetFactory from '../../factories/msstackedcolumn-spline-dataset';\n\nconst CHART_STR = 'Multi-series Dual Y-Axis Stacked Column and Line Chart',\n  SPLIE_STR = 'spline',\n  COLUMN_STR = 'column';\n/**\n * class definition for MSStackedColumn2DSplineDy chart api\n */\nclass MSStackedColumn2DSplineDy extends MSStackedColumn2DLineDy {\n  /**\n   * constructor fn\n   */\n  constructor () {\n    super();\n    this.stack100percent = 0;\n    this.hasLineSet = true;\n    this.lineset = true;\n    this.registerFactory('dataset', datasetFactory, ['vCanvas']);\n  }\n  /**\n   * Sets the name of the component\n   * @return {string} name\n   */\n  getName () {\n    return 'MSStackedColumn2DSplineDy';\n  }\n\n  /**\n   * Provides the name of the chart extension\n   *\n   * @static\n   * @return {string} The name of the chart extension\n   */\n  static getName () {\n    return 'MSStackedColumn2DSplineDy';\n  }\n\n  /**\n   * This sets the default configuration\n   * @memberof MSStackedColumn2DSplineDy\n   */\n  __setDefaultConfig () {\n    super.__setDefaultConfig();\n    let config = this.config;\n    config.sDefaultDatasetType = SPLIE_STR;\n    config.friendlyName = CHART_STR;\n    config.defaultDatasetType = COLUMN_STR;\n  }\n  /**\n   * This method return the dataset definations for this charts\n   * @param  {string} name type of dataset class\n   * @return {Object}      dataset class\n   */\n  getDSdef (name) {\n    return name === 'spline' ? SplineDataset : ColumnDataset;\n  }\n  /**\n   * This method return the dataset-group definations for this charts\n   * @param  {string} name is type of dataset group\n   * @return {Object} <dataset group class>     dataset group class\n   */\n  getDSGroupdef () {\n    return CartesianGroup;\n  }\n}\nexport default MSStackedColumn2DSplineDy;\n","import msStackedColumnDatasetFactory from './msstackedcolumn-dataset';\nimport { datasetFactory } from '@fusioncharts/core/src/lib';\n\nlet removeLineSet = function (component) {\n  let lineSet = component.getChildren('dataset_line'),\n    i;\n  for (i = lineSet && lineSet.length - 1; i > -1; i--) {\n    lineSet[i].remove();\n  }\n};\n/**\n * function to  create dataset, groupmaneger.\n * assign dataset to group manager.\n * @param {Object} chart Chart API\n **/\nexport default function (chart) {\n  let jsonData = chart.getFromEnv('dataSource'),\n    dataset = jsonData.dataset,\n    splineSets = jsonData.lineset || [],\n    splinesetStartIndex,\n    indices,\n    canvas = chart.getChildren('canvas')[0],\n    vCanvas = canvas.getChildren('vCanvas')[1];\n\n  if (!dataset && splineSets.length === 0) {\n    chart.setChartMessage();\n    return;\n  }\n  msStackedColumnDatasetFactory(chart);\n  splinesetStartIndex = chart.config._lastDatasetIndex + 1;\n  if (splineSets && splineSets.length) {\n    indices = Array(splineSets.length).fill(splinesetStartIndex).map((n, j) => {\n      return (n + j);\n    });\n    datasetFactory(vCanvas, chart.getDSdef('spline'), 'dataset_spline', splineSets.length, splineSets, indices);\n  } else {\n    removeLineSet(vCanvas);\n  }\n}\n"],"sourceRoot":""}