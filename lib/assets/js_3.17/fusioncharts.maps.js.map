{"version":3,"sources":["webpack:///./packages/fc-maps/src/index.js","webpack:///./packages/fc-maps/src/chart/maps/index.js","webpack:///./packages/fc-maps/src/factories/maps-dataset.js","webpack:///./packages/fc-maps/src/dataset/entities/index.js","webpack:///./packages/fc-maps/src/dataset/_internal/map-entities.animation.js","webpack:///./packages/fc-maps/src/dataset/markers/index.js","webpack:///./packages/fc-maps/src/dataset/groups/map-group.js"],"names":["name","type","requiresFusionCharts","extension","FusionCharts","addDep","Maps","defaultPaletteOptions","extend2","foregroundcolor","foregroundalpha","foregrounddarkcolor","foregrounddarkalpha","foregroundlightcolor","foregroundlightalpha","backgroundlightcolor","backgroundlightalpha","backgroundlightangle","backgroundlightratio","backgroundcolor","backgroundalpha","backgrounddarkcolor","backgrounddarkalpha","backgrounddarkangle","backgrounddarkratio","shadow","defaultPaletteOption","colorPaletteMapGlobal","basefontcolor","bordercolor","borderalpha","bgcolor","bgalpha","bgangle","bgratio","canvasbordercolor","canvasborderalpha","canvasbgcolor","canvasbgalpha","canvasbgangle","canvasbgratio","tooltipbordercolor","tooltipborderalpha","tooltipbgcolor","tooltipbgalpha","tooltipfontcolor","legendbordercolor","legendborderalpha","markerbordercolor","markerborderalpha","markerfillcolor","markerfillalpha","markerfillangle","markerfillratio","plotfillcolor","plotfillalpha","plotfillangle","plotfillratio","plothoverfillcolor","plothoverfillalpha","plothoverfillangle","plothoverfillratio","plotbordercolor","plotborderalpha","eiMethodsGlobal","getMapName","this","jsVars","instanceAPI","getName","toLowerCase","getEntityList","i","entities","dataset","data","config","datasets","getDatasets","len","length","entityList","components","hasOwnProperty","push","id","originalId","label","shortlabel","shortLabel","value","formattedValue","toolText","getMapAttribute","chartObj","raiseWarning","getChartAttribute","apply","arguments","exportMap","exportChart","addMarker","options","markers","addMarkerItem","updateMarker","newId","BLANK","updateMarkerItem","removeMarker","_removeMarkerItem","math","window","Math","mathMin","min","mathMax","max","ColorPalette","hash","index","key","subpalette","BLANKSTRING","Array","ComponentInterface","friendlyName","revision","hasCanvas","standaloneInit","defaultDatasetType","defaultSeriesType","fireGroupEvent","legendposition","hasGradientLegend","isMap","paletteColors","bgColor","bgAngle","bgRatio","bgAlpha","toolTipBgColor","toolTipBorderColor","baseFontColor","tickColor","trendColor","plotFillColor","borderColor","borderAlpha","colorPaletteMap","eiMethods","registerFactory","decideLegendCreation","stubFN","createColorRangeManager","datasetFactory","canvasFactory","_checkInvalidSpecificData","invalid","__setDefaultConfig","baseWidth","baseHeight","baseScaleFactor","getType","configureAttributes","dataObj","chartAttrs","colorPalette","getChildren","chart","graph","map","jsonData","palette","pluckNumber","paletteIndex","attachChild","skipCanvasDrawing","_parseBackgroundCosmetics","parseChartAttr","inCancolor","inCanFontFamily","inCanFontSize","style","markerAttrs","entityBorderColor","pluck","entitybordercolor","entityFillColor","entityfillcolor","fillcolor","entityFillAlpha","entityfillalpha","fillalpha","entityFillRatio","entityfillratio","fillratio","entityFillAngle","entityfillangle","fillangle","nullEntityColor","nullentityfillcolor","nullentitycolor","markerDataEnabled","usevaluesformarkers","items","application","definition","origMarginTop","charttopmargin","maptopmargin","origMarginLeft","chartleftmargin","mapleftmargin","origMarginBottom","chartbottommargin","mapbottommargin","origMarginRight","chartrightmargin","maprightmargin","labelsOnTop","entitylabelsontop","inCanfontFamily","inCanfontSize","entityOpts","dataLabels","fontFamily","fontSize","lineHeight","inCanLineHeight","color","entitylabelcolor","entitylabelbgcolor","entitylabelbordercolor","fillColor","fillAlpha","fillRatio","fillAngle","entityborderalpha","borderThickness","showentityborder","showborder","entityborderthickness","borderthickness","scaleBorder","scaleentityborder","scaleborder","hoverFillColor","entityfillhovercolor","hoverfillcolor","hovercolor","hoverFillAlpha","entityfillhoveralpha","hoverfillalpha","hoveralpha","hoverFillRatio","entityfillhoverratio","hoverfillratio","hoverratio","hoverFillAngle","entityfillhoverangle","hoverfillangle","hoverangle","hoverBorderThickness","entityborderhoverthickness","hoverborderthickness","hoverBorderColor","entityborderhovercolor","hoverBorderAlpha","entityborderhoveralpha","nullEntityAlpha","nullentityfillalpha","nullentityalpha","nullEntityRatio","nullentityfillratio","nullentityratio","nullEntityAngle","nullentityfillangle","nullentityangle","connectorColor","labelconnectorcolor","connectorcolor","connectorAlpha","labelconnectoralpha","connectoralpha","connectorThickness","labelconnectorthickness","showHoverEffect","showentityhovereffect","usehovercolor","showhovereffect","hoverOnNull","hoveronnull","entityhoveronnull","labelPadding","labelpadding","showLabels","showlabels","includeNameInLabels","includenameinlabels","includeValueInLabels","includevalueinlabels","useSNameInTooltip","usesnameintooltip","useShortName","usesnameinlabels","labelSepChar","labelsepchar","showTooltip","showentitytooltip","showtooltip","tooltipSepChar","tooltipsepchar","tooltext","entitytooltext","hideNullEntities","hidenullentities","showHiddenEntityBorder","showhiddenentityborder","showNullEntityBorder","shownullentityborder","hiddenEntityColor","hiddenentitycolor","hiddenentityfillcolor","hiddenentityalpha","hiddenentityfillalpha","hiddenEntityAlpha","showshadow","defaultPlotShadow","markerOpts","markerfont","markerfontsize","parseInt","fontColor","markerlabelcolor","markerfontcolor","labelBgColor","markerlabelbgcolor","labelBorderColor","markerlabelbordercolor","showmarkertooltip","showmarkerlabels","showmarkerhovereffect","markerlabelpadding","labelWrapWidth","markerlabelwrapwidth","labelWrapHeight","markerlabelwrapheight","markerbgcolor","fillPattern","markerfillpattern","markerbgpattern","markerfillhovercolor","markerfillhoveralpha","markerfillhoverratio","markerfillhoverangle","markerborderthickness","markerborderhoverthickness","markerborderhovercolor","markerborderhoveralpha","radius","markerradius","trimString","shapeId","defaultmarkershape","autoScale","autoscalemarkers","markertooltext","dataEnabled","valueToRadius","markerradiusfromvalue","valueMarkerAlpha","valuemarkeralpha","hideNull","hidenullmarkers","nullRadius","nullmarkerradius","adjustViewPort","adjustviewportformarkers","startAngle","markerstartangle","maxRadius","maxmarkerradius","minRadius","minmarkerradius","applyAll","applyallmarkers","showmarkershadow","connectorOpts","showconnectorhovereffect","thickness","connectorthickness","markerconnthickness","markerconncolor","alpha","markerconnalpha","hoverThickness","connectorhoverthickness","hoverColor","connectorhovercolor","hoverAlpha","connectorhoveralpha","dashed","connectordashed","markerconndashed","dashLen","connectordashlen","markerconndashlen","dashGap","connectordashgap","markerconndashgap","font","connectorfont","markerconnfont","connectorlabelcolor","connectorfontcolor","markerconnfontcolor","connectorfontsize","markerconnfontsize","showconnectorlabels","connectorlabelbgcolor","markerconnlabelbgcolor","connectorlabelbordercolor","markerconnlabelbordercolor","showconnectorshadow","showconnectortooltip","connectortooltext","hideOpen","hideopenconnectors","adjustViewPortForMarkers","_attachMouseEvents","listeners","getFromEnv","containerElem","domEvtHandler","listen","hasTouch","searchMouseMove","document","_dispose","unlisten","e","mousePos","chartConfig","toolTipController","currentToolTip","lastHoveredPoint","lastMouseCoordinate","lastInteractionEvent","originalEvent","getMouseCoordinate","chartX","chartY","minX","canvasLeft","minY","canvasTop","maxX","canvasWidth","maxY","canvasHeight","insideCanvas","isWithinCanvas","lastMouseEvent","x","y","_searchNearestNeighbour","hoverOutFn","element","hide","point","event","kdPoint","kDTree","getElement","highlightPoint","_createLayers","showBorder","showcanvasborder","borderWidth","canvasborderthickness","borderRadius","canvasborderradius","borderDashStyle","borderdashed","getDashStyle","borderdashlen","borderdashgap","convertColor","_getBackgroundCosmetics","FCcolor","angle","ratio","_parseCanvasCosmetics","canvasConfig","origCanvasLeftMargin","canvasleftmargin","origCanvasRightMargin","canvasrightmargin","origCanvasTopMargin","canvastopmargin","origCanvasBottomMargin","canvasbottommargin","canvasBorderRadius","origCanvasTopPad","canvastoppadding","origCanvasBottomPad","canvasbottompadding","origCanvasLeftPad","canvasleftpadding","origCanvasRightPad","canvasrightpadding","preliminaryScaling","item","markerArray","Infinity","Number","x1","y1","getScalingParameters","wg","hg","wv","hv","scaleFactor","strokeWidth","aspR","widthScaleR","heightScaleR","translateX","translateY","calculateMarkerBounds","xOffset","yOffset","markerDataset","markerConf","minR","maxR","r","markerOptions","limits","getDataLimits","dataMin","dataMax","v2r","calculateMarkerRadiusLimits","markerObjs","cleanValue","UNDEF","__hideMarker","_spaceManager","availableHeight","initSpace","scalingParams","sFactor","initHv","initWv","allottedSpace","topSpace","legend","gLegend","legendPosition","legendPos","split","conf","extraMarkerSpace","xDifference","yDifference","chartBorderWidth","_allocateSpace","top","bottom","left","right","_manageActionBarSpace","POSITION_TOP","showLegend","_manageLegendSpace","_manageChartMenuBar","transformStr","join","annotationConfig","showbelow","autoscale","grpxshift","grpyshift","xscale","yscale","scaletext","useTracker","getEntityPaths","copy","returnObj","ents","checkComplete","entityFlag","entitiesReady","markersDrawn","fireChartInstanceEvent","renderer","MSCartesian","mapGroupManager","entityJSONData","markerJSONData","componentFactory","MapGroup","Entities","Markers","remove","Raphael","getDep","userAgent","navigator","isIE","test","opera","isStrokeReg","isWebKit","mathCeil","ceil","colorize","original","obj","col","toString","toRaphaelColor","pruneStrokeAttrs","thicknessModifier","finalThicknessModifier","getTextWrapWidth","w","center","getTextWrapHeight","middle","h","setCustomAttrs","entityObj","attrs","graphics","outlines","attr","mapsAnimation","entityJSONDataOb","JSONData","dataItem","entityItem","minMaxArrayLen","d","rawData","mapAttrs","minMaxArray","colorManager","entityDef","entitydef","attachEvent","addExtEventListener","component","legendInteractivity","legendItem","colorObj","maxMinArray","updateEntityColors","useSNameAsId","usesnameasid","_redefineEntities","arr","ret","convertArrayToIdMap","calculateDataLimits","colorrange","_detachChild","_configureEntity","imprint","_sanitizeEntityOptions","minValue","maxValue","visibleEntityAttr","nullAttr","fill","hiddenAttr","alphaArr","hidden","entityColorObj","entity","entityAttrs","applyAttr","visible","hasState","colorRange","setAnimationState","getColorObj","code","outOfRange","removeLegendState","setLegendState","dataArr","numberFormatter","getCleanValue","entityJSON","link","align","valign","fontBold","emptyColorObject","fillColorObject","labels","labelObj","oriLabels","entityConf","labelConfig","defaultTooltip","_getDefaultTooltip","tooltextMacroObj","sName","lName","styleObj","parseUnsafeString","parseTooltext","useHoverColor","isNaN","labelAlignment","showLabel","showlabel","fontsize","fontbold","labelcolor","fontcolor","labelbgcolor","labelbordercolor","borderhoverthickness","borderhovercolor","hoverbordercolor","borderhoveralpha","hoverborderalpha","origConnectorThickness","isVisible","origId","getColor","oriAlpha","stroke","fillhovercolor","fillhoveralpha","fillhoverangle","fillhoverratio","hoverColorObject","vAlign","entityLabels","displayValue","getDisplayValue","isDataEnabled","shortText","text","userValue","userDV","displayvalue","labelposition","labelalignment","labelconnectors","defObj","oldId","newObj","entityStore","entityDataStore","redefinedEntities","processedIds","entityCount","internalid","newid","sname","lname","draw","BATCH_SIZE","hasSVG","createContainer","ready","labelBatchSize","_batchRender","doBatchRendering","count","ent","outlinesDrawn","firstEntity","batchSize","keys","entityKeys","_getKeys","Object","keysLength","entityLength","drawEntities","entityStartIndex","drawEntity","drawn","outlineStartIndex","addJob","bind","priorityList","entitydraw","_addEventListenersToEntities","initComplete","startIndex","addMouseGestures","nextId","tooltip","outlinesDrawCount","outlineGraphics","outline","customStrokeWidthModifier","shadowOptions","animationManager","pathStr","addTo","getLinkedParent","getChildContainer","shadowGroup","showShadow","outlinePath","finalAttr","_configureEntityDrawingParams","setAnimation","el","container","enableToolTip","concat","assign","scaleStrokes","scaledPixel","scaledPixelWithBaseFactor","fillOpacity","scalefactor","opacity","useFilter","entityBorderThickness","transform","drawLabels","j","groupItems","annObj","itemMap","labelItems","annGroupElem","annCount","mapLabelAnnotations","labelItemsAdded","annConfig","Annotation","addCustomGroup","destroy","_renderer","drawLabel","animationLabel","addGroup","addEventListener","onmouseover","onmouseout","onclick","drawLabelConnFn","l","labelArr","labelConnectors","drawLabelConnectors","_getLabelObject","labelPos","fontStyleObj","labelX","labelY","box","fsize","oriLabelObj","firstEle","labelsArr","labelPosition","getBBox","width","height","parseFloat","wrap","wrapwidth","wrapheight","outlineText","textoutline","css","cursor","bold","hoverEnt","entityClick","entityRollOver","entityRollOut","ontouchstart","annotationsArray","useValue","connectorArr","dataSet","connElem","path","datasetGroup","connectorElem","entityElem","node","__entity","entityBox","linkClickFN","x2","y2","eventArgs","call","hoverAttr","plotEventHandler","clearTimeout","timer","hoverEntity","state","revertAttr","setTimeout","groupId","bindListener","graphicEle","_listenersBinded","on","hover","legacyEventArgs","parent","pContainer","addChildContainer","fadeEffect","initialAttr","PATH_APPEARING_FN","slot","PATH_UPDATING_FN","input","LABEL_CONNECTOR_APPEARING_FN","ENTITY_LABEL_APPEARING_FN","MARKER_ITEM_APPEARING_FN","MARKER_ITEM_UPDATING_FN","GROUP_APPEARING_FN","GROUP_UPDATING_FN","hoverFn","marker","annotations","shape","markerShape","groupConfig","_markerEventArgs","markerConfig","hovereffect","gradientUnits","radialGradient","_hoverattrs","update","getId","scaledX","scaleX","scaledY","scaleY","grpXShift","grpYShift","raiseEventGroup","wrapper","rawColor","rawAlpha","rawAngle","rawRatio","rawFillPattern","_defaultattrs","clickFn","convertToObj","idKey","topLabelAlignmentFn","leftLabelAlignmentFn","rightLabelAlignmentFn","bottomLabelAlignmentFn","centerLabelAlignmentFn","rightWrapWidthFn","leftWrapWidthFn","centerWrapWidthFn","topWrapHeightFn","middleWrapHeightFn","bottomWrapHeightFn","getLabelAlignment","getWrapWidth","getWrapHeight","mapAnnotations","_parseMarkers","defineMarkersNShapes","configureConnectors","markerMaxRadius","markermaxradius","markerMinRadius","markerminradius","minMax","getMarkerRadiusLimits","markerData","markerObj","shapeArr","shapes","markerStyle","shapeObjs","_initializeMarkerItem","shapeid","_isHidden","shapeObj","defineArr","defineObject","applyObject","shapeObjHash","markerObjHash","userMax","userMin","finalUserMin","finalUserMax","dime","factor","markerDefinition","markerApplication","opts","hasValue","markerLabel","drawOptions","drawComplete","fromMarker","toMarker","hoverthickness","connLabelConfig","datasetComponents","connectors","connector","connectorComponents","getMouseOverFn","unfilteredConfig","hoverEffect","_hoverAttrs","getMouseOutFn","_defaultAttrs","getClickFn","chartConnOptions","connectorItem","from","to","dashlen","dashgap","fromId","toId","fromLabel","toLabel","fromMarkerId","toMarkerId","appliedObj","markerItem","rawConfig","markerLabelGroup","markerGroup","chartConf","chartMarkerOpts","markerItems","markerLabels","appliedMarkers","validShape","_drawConnectors","imageLoadCount","imageCount","conIsHidden","_drawMarkerItem","_annotationIndex","scaleimages","retrieveItem","_buildKdTree","kdTree","kdArrayMap","kdPointsArr","KdTree","_setSearchLimit","buildKdTree","wrapWidth","wrapHeight","temp","calcX","calcY","innerradius","sides","datasetConfig","itemScale","scale","labelpos","markerId","_markerLabel","_markerId","startangle","endangle","getShapeArgs","onload","imageattr","derivedX","derivedY","shapeInfo","onerror","_getLabelOptions","_labelBaseWidth","_labelBaseHeight","_labelXOffset","_labelYOffset","connectorLabel","toX","toY","fromMarkerConfig","toMarkerConfig","connectorGroup","connectorLabelGroup","showConnectorLabels","connectorOptions","connectorLabelItems","groups","validConnector","tox","toy","markerRadius","alignment","markerConfigOptions","addItem","origOptions","annotOptions","optConfig","getNeighbour","configureChildren","child","configure","_mapChildren","parentChildContainers","plotGroup","abovePlotGroup","toFront","toBack","_transformGroup","manager","chartInstance","plotShadowGroup","detachHandler","args","clickedEntityBox","linkedcharttransition","show","allVisible","maxminObj","numOfColumns","getMaxMin","_maxminObj","getState","setState","range"],"mappings":"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","file":"fusioncharts.maps.js","sourcesContent":["import Maps from './chart/maps';\n\nexport { Maps };\n\nexport default {\n  name: 'maps',\n  type: 'package',\n  requiresFusionCharts: true,\n  extension: FusionCharts => FusionCharts.addDep(Maps)\n};\n","/* eslint require-jsdoc: 'error', valid-jsdoc: [\"error\", { \"requireReturn\": false }] */\nimport MSCartesian from '@fusioncharts/charts/src/chart/_internal/mscartesian';\nimport {ComponentInterface} from '@fusioncharts/core/src/component-interface';\nimport * as defaultPaletteOption from '@fusioncharts/charts/src/_internal/color-utils/chart-palette-colors';\nimport domEvtHandler from '@fusioncharts/core/src/dom-event';\nimport { raiseWarning } from '@fusioncharts/core/src/event-api';\nimport {\n  pluck,\n  hasTouch,\n  trimString,\n  pluckNumber,\n  getDashStyle,\n  getMouseCoordinate,\n  convertColor,\n  BLANKSTRING,\n  stubFN,\n  extend2,\n  POSITION_TOP\n} from '@fusioncharts/core/src/lib';\nimport datasetFactory from '../../factories/maps-dataset';\nimport canvasFactory from '@fusioncharts/charts/src/factories/canvas';\nimport createColorRangeManager from '@fusioncharts/charts/src/factories/colorrange';\nimport decideLegendCreation from '@fusioncharts/charts/src/factories/legendmanager';\nlet defaultPaletteOptions = extend2({\n    foregroundcolor: '333333',\n    foregroundalpha: '100',\n    foregrounddarkcolor: '111111',\n    foregrounddarkalpha: '100',\n    foregroundlightcolor: '666666',\n    foregroundlightalpha: '100',\n    backgroundlightcolor: 'FFFFFF',\n    backgroundlightalpha: '100',\n    backgroundlightangle: 90,\n    backgroundlightratio: '',\n    backgroundcolor: 'FFFFCC',\n    backgroundalpha: '100',\n    backgrounddarkcolor: 'ffcc66',\n    backgrounddarkalpha: '100',\n    backgrounddarkangle: 270,\n    backgrounddarkratio: '',\n    shadow: 1\n  }, defaultPaletteOption),\n  zeroCommaHundredStr = '0,100',\n  MAP_STR = 'Map',\n  MAPS_STR = 'maps',\n  GEO_STR = 'geo',\n  RIGHT_STR = 'right',\n  colorPaletteMapGlobal = {\n    basefontcolor: 'foregroundcolor',\n    bordercolor: 'foregrounddarkcolor',\n    borderalpha: 'foregrounddarkalpha',\n    bgcolor: 'backgroundlightcolor',\n    bgalpha: 'backgroundlightalpha',\n    bgangle: 'backgroundlightangle',\n    bgratio: 'backgroundlightratio',\n    canvasbordercolor: 'foregrounddarkcolor',\n    canvasborderalpha: 'foregrounddarkalpha',\n    canvasbgcolor: 'backgroundlightcolor',\n    canvasbgalpha: 'backgroundlightalpha',\n    canvasbgangle: 'backgroundlightangle',\n    canvasbgratio: 'backgroundlightratio',\n    tooltipbordercolor: 'foregrounddarkcolor',\n    tooltipborderalpha: 'foregrounddarkalpha',\n    tooltipbgcolor: 'backgroundlightcolor',\n    tooltipbgalpha: 'backgroundlightalpha',\n    tooltipfontcolor: 'foregroundcolor',\n    legendbordercolor: 'foregrounddarkcolor',\n    legendborderalpha: 'foregrounddarkalpha',\n    markerbordercolor: 'foregroundlightcolor',\n    markerborderalpha: 'foregroundlightalpha',\n    markerfillcolor: 'backgrounddarkcolor',\n    markerfillalpha: 'backgrounddarkalpha',\n    markerfillangle: 'backgrounddarkangle',\n    markerfillratio: 'backgrounddarkratio',\n    plotfillcolor: 'backgroundcolor',\n    plotfillalpha: 'backgroundalpha',\n    plotfillangle: 'backgroundangle',\n    plotfillratio: 'backgroundratio',\n    plothoverfillcolor: 'backgrounddarkcolor',\n    plothoverfillalpha: 'backgrounddarkalpha',\n    plothoverfillangle: 'backgrounddarkangle',\n    plothoverfillratio: 'backgrounddarkratio',\n    plotbordercolor: 'foregroundcolor',\n    plotborderalpha: 'foregroundalpha',\n    shadow: 'shadow'\n  },\n  eiMethodsGlobal = {\n    getMapName: function () {\n      let chart = this,\n        iapi = chart.jsVars.instanceAPI,\n        mapName = iapi.getName().toLowerCase();\n      return mapName;\n    },\n\n    getEntityList: function () {\n      let chart = this,\n        iapi = chart.jsVars.instanceAPI,\n        datasets = iapi.getDatasets() || [],\n        i,\n        entities,\n        dataset,\n        len = datasets.length,\n        entityList = [],\n        data,\n        entityObj,\n        config,\n        name;\n\n      for (i = 0; i < len; i++) {\n        dataset = datasets[i] || [];\n        name = dataset.getName();\n        if (name === 'entities') {\n          entities = dataset;\n          break;\n        }\n      }\n\n      data = entities.components.data;\n      len = data.length;\n      for (i in data) {\n        if (data.hasOwnProperty(i)) {\n          entityObj = data[i] || {};\n          config = entityObj.config || {};\n          entityList.push({\n            id: config.id,\n            originalId: (config.originalId || config.id),\n            label: config.label,\n            shortlabel: config.shortLabel,\n            value: config.value,\n            formattedValue: config.formattedValue,\n            toolText: config.toolText\n          });\n        }\n      }\n      return entityList;\n    },\n\n    getMapAttribute: function () {\n      let chartObj = this;\n\n      raiseWarning(this, '12061210581', 'run', 'JavaScriptRenderer~getMapAttribute()',\n        'Use of deprecated \"getMapAttribute()\". Replace with \"getChartAttribute()\".');\n      return chartObj.getChartAttribute.apply(chartObj, arguments);\n    },\n    exportMap: function () {\n      let chartObj = this;\n\n      raiseWarning(this, '12061210581', 'run', 'JavaScriptRenderer~exportMap()',\n        'Use of deprecated \"exportMap()\". Replace with \"exportChart()\".');\n      return chartObj.exportChart &&\n                    chartObj.exportChart.apply(chartObj, arguments);\n    },\n\n    addMarker: function (options) {\n      let iapi = this.jsVars.instanceAPI,\n        datasets = iapi.getDatasets() || [],\n        len = datasets.length,\n        i,\n        dataset,\n        markers,\n        name;\n\n      for (i = 0; i < len; i++) {\n        dataset = datasets[i] || [];\n        name = dataset.getName();\n        if (name === 'markers') {\n          markers = dataset;\n          break;\n        }\n      }\n\n      if (markers && !markers.addMarkerItem(options)) {\n        raiseWarning(this, '1309264086', 'run', 'MapsRenderer~addMarker()',\n          'Failed to add marker. Check the options and try again.');\n      }\n    },\n\n    updateMarker: function (id, options) {\n      let iapi = this.jsVars.instanceAPI,\n        datasets = iapi.getDatasets() || [],\n        newId,\n        len = datasets.length,\n        i,\n        dataset,\n        markers,\n        name;\n\n      for (i = 0; i < len; i++) {\n        dataset = datasets[i] || [];\n        name = dataset.getName();\n        if (name === 'markers') {\n          markers = dataset;\n          break;\n        }\n      }\n\n      if (markers && id) {\n        newId = (id + BLANK).toLowerCase();\n        markers.updateMarkerItem(newId, options);\n      }\n    },\n\n    removeMarker: function (id) {\n      let iapi = this.jsVars.instanceAPI,\n        datasets = iapi.getDatasets() || [],\n        len = datasets.length,\n        newId,\n        i,\n        dataset,\n        markers,\n        name;\n\n      for (i = 0; i < len; i++) {\n        dataset = datasets[i] || [];\n        name = dataset.getName();\n        if (name === 'markers') {\n          markers = dataset;\n          break;\n        }\n      }\n\n      if (id) {\n        newId = (id + BLANK).toLowerCase();\n\n        markers._removeMarkerItem(newId);\n      }\n    }\n  },\n\n  UNDEF,\n\n  DASH_DEF = 'none',\n\n  // animDurations = {\n  //   click: 300,\n  //   hover: 300,\n  //   linkedScale: 1000,\n  //   legendTransition: 1000\n  // },\n\n  COMMASPACE = ', ',\n\n  BLANK = '',\n  POSITION_BOTTOM = 'bottom',\n  SHAPE_CIRCLE = 'circle',\n\n  math = window.Math,\n  mathMin = math.min,\n  mathMax = math.max,\n\n  isWithinCanvas = function (e, chart) {\n    let mousePos = getMouseCoordinate(chart.getFromEnv('chart-container'), e, chart),\n      /* converts the original mouse event to a Fusion\n            Charts event( that has chartX, chartY, pageX and pageY as its property) */\n      chartX = mousePos.chartX,\n      chartY = mousePos.chartY,\n      chartConfig = chart.config,\n      minX = chartConfig.canvasLeft,\n      minY = chartConfig.canvasTop,\n      maxX = chartConfig.canvasLeft + chartConfig.canvasWidth,\n      maxY = chartConfig.canvasHeight + chartConfig.canvasTop;\n    // default value of the flag.\n    mousePos.insideCanvas = false;\n\n    // store the original event as well\n    mousePos.originalEvent = e;\n    // return true if within the canvas\n    if (chartX > minX && chartX < maxX && chartY > minY && chartY < maxY) {\n      // set the flag to be TRUE if triggered within the canvas area.\n      mousePos.insideCanvas = true;\n    }\n    return mousePos;\n  };\n/**\n * Creates class ColorPalette for maps\n */\nclass ColorPalette extends ComponentInterface {\n  /**\n   * Instantiate ColorPalette class\n   * @param {Object} hash color properties map\n   * @param {number} index color palette index\n   */\n  constructor (hash, index) {\n    super();\n    this.subpalette = BLANKSTRING;\n    this.key = BLANKSTRING;\n    this.index = index;\n    var key;\n    for (key in hash) {\n      this.subpalette = defaultPaletteOptions[hash[key]];\n      this[key] = this.subpalette instanceof Array ? this.subpalette[index] : this.subpalette;\n      this.key = key;\n    }\n  }\n}\n/**\n * Creates Maps class\n */\nclass Maps extends MSCartesian {\n  /**\n   * Instantiate Map class\n   */\n  constructor () {\n    super();\n    // this.name = GEO;\n    this.friendlyName = MAP_STR;\n    this.revision = 1;\n    this.hasCanvas = true;\n    this.standaloneInit = false; // this map cannot be displayed alone\n    this.defaultDatasetType = MAPS_STR;\n    this.defaultSeriesType = GEO_STR;\n    this.fireGroupEvent = true;\n    this.legendposition = RIGHT_STR;\n    this.hasGradientLegend = true;\n    this.isMap = true;\n    this.defaultPaletteOptions = {\n      // Store colors now\n      paletteColors: [['A6A6A6', 'CCCCCC', 'E1E1E1', 'F0F0F0'],\n        ['A7AA95', 'C4C6B7', 'DEDFD7', 'F2F2EE'],\n        ['04C2E3', '66E7FD', '9CEFFE', 'CEF8FF'],\n        ['FA9101', 'FEB654', 'FED7A0', 'FFEDD5'],\n        ['FF2B60', 'FF6C92', 'FFB9CB', 'FFE8EE']],\n      // Store other colors\n      // ------------- For 2D Chart ---------------//\n      // We're storing 5 combinations, as we've 5 defined palettes.\n      bgColor: ['FFFFFF', 'CFD4BE,F3F5DD', 'C5DADD,EDFBFE', 'A86402,FDC16D', 'FF7CA0,FFD1DD'],\n      bgAngle: [270, 270, 270, 270, 270],\n      bgRatio: [zeroCommaHundredStr, zeroCommaHundredStr, zeroCommaHundredStr, zeroCommaHundredStr,\n        zeroCommaHundredStr],\n      bgAlpha: ['100', '60,50', '40,20', '20,10', '30,30'],\n\n      toolTipBgColor: ['FFFFFF', 'FFFFFF', 'FFFFFF', 'FFFFFF', 'FFFFFF'],\n      toolTipBorderColor: ['545454', '545454', '415D6F', '845001', '68001B'],\n\n      // Default font color should be #555555\n      baseFontColor: ['555555', '60634E', '025B6A', 'A15E01', '68001B'],\n      tickColor: ['333333', '60634E', '025B6A', 'A15E01', '68001B'],\n      trendColor: ['545454', '60634E', '415D6F', '845001', '68001B'],\n\n      plotFillColor: ['545454', '60634E', '415D6F', '845001', '68001B'],\n\n      borderColor: ['767575', '545454', '415D6F', '845001', '68001B'],\n      borderAlpha: [50, 50, 50, 50, 50]\n    };\n\n    this.colorPaletteMap = colorPaletteMapGlobal;\n    this.eiMethods = eiMethodsGlobal;\n    // decide and create legend after creating canvas\n    this.registerFactory('legend', decideLegendCreation, ['canvas']);\n\n    this.registerFactory('axis', stubFN, ['canvas']);\n\n    // create color manager after creating legend-decider\n    this.registerFactory('colormanager-decider', createColorRangeManager, ['legend']);\n\n    this.registerFactory('dataset', datasetFactory, ['colormanager-decider']);\n    this.registerFactory('canvas', canvasFactory);\n  }\n\n  /**\n   * function to check if the chart specific data is proper is not\n   * this fn is define for specific chart types\n   * @return {boolean} if JSON data is valid or not\n   */\n  _checkInvalidSpecificData () {\n    // @temp - need to remove\n    this.config.invalid = false;\n    return false;\n  }\n\n  /**\n   * parse defualt configuration of the chart\n   */\n  __setDefaultConfig () {\n    super.__setDefaultConfig();\n    var config = this.config;\n    !config.baseWidth && (config.baseWidth = 400);\n    !config.baseHeight && (config.baseHeight = 300);\n    !config.baseScaleFactor && (config.baseScaleFactor = 1);\n  }\n\n  /**\n   * Returns the name of the component\n   * @return {string} name of the component\n   */\n  static getName () {\n    return 'maps';\n  }\n\n  /**\n   * Returns the type of the component\n   * @return {string} type of the component\n   */\n  static getType () {\n    return 'chartAPI';\n  }\n\n  /**\n   * Returns the name of the component\n   * @return {string} name of the component\n   */\n  getName () {\n    return this.config.name || 'GEO';\n  }\n\n  /**\n   * Returns the type of the component\n   * @return {string} type of the component\n   */\n  getType () {\n    return 'chartAPI';\n  }\n\n  /**\n   * function to create component and configure and also configure the chart\n   * It creates components which are depend on data and configure them and also configure chart\n   * It calls helper function namely, configure\n   * @param  {Object} dataObj contains json data of the chart\n   */\n  configureAttributes (dataObj) {\n    let iapi = this,\n      colorPalette = iapi.getChildren('colorPalette') && iapi.getChildren('colorPalette')[0],\n      chartAttrs;\n\n    chartAttrs = dataObj.chart = (dataObj.chart || dataObj.graph ||\n            dataObj.map || { });\n    iapi.jsonData = dataObj;\n\n    if (!colorPalette) {\n      colorPalette = new ColorPalette(this.colorPaletteMap,\n        (chartAttrs.palette > 0 && chartAttrs.palette < 6\n          ? chartAttrs.palette : pluckNumber(iapi.paletteIndex, 1)) - 1);\n      iapi.attachChild(colorPalette, 'colorPalette');\n    }\n\n    iapi.config.skipCanvasDrawing = true;\n    super.configureAttributes(dataObj);\n    iapi._parseBackgroundCosmetics();\n  }\n\n  /**\n   * Parse the chart attributes and store in chart's config\n   * @param {Object} dataObj User input json\n   */\n  parseChartAttr (dataObj) {\n    let iapi = this,\n      config,\n      jsonData = iapi.jsonData,\n      chartAttrs = jsonData.chart || jsonData.map,\n      markerAttrs = jsonData.markers,\n      // Select the color palette\n      palette = new ColorPalette(this.colorPaletteMap,\n        (chartAttrs.palette > 0 && chartAttrs.palette < 6\n          ? chartAttrs.palette : pluckNumber(iapi.paletteIndex, 1)) - 1),\n      inCancolor,\n      inCanFontFamily,\n      inCanFontSize,\n      style,\n      entityBorderColor = pluck(chartAttrs.entitybordercolor, chartAttrs.bordercolor,\n        palette.plotbordercolor),\n      entityFillColor = pluck(chartAttrs.entityfillcolor, chartAttrs.fillcolor, palette.plotfillcolor),\n      entityFillAlpha = pluck(chartAttrs.entityfillalpha, chartAttrs.fillalpha, palette.plotfillalpha),\n      entityFillRatio = pluck(chartAttrs.entityfillratio, chartAttrs.fillratio, palette.plotfillratio),\n      entityFillAngle = pluck(chartAttrs.entityfillangle, chartAttrs.fillangle, palette.plotfillangle),\n      nullEntityColor = pluck(chartAttrs.nullentityfillcolor, chartAttrs.nullentitycolor, entityFillColor),\n      markerDataEnabled = pluckNumber(chartAttrs.usevaluesformarkers,\n        jsonData.markers && jsonData.markers.items && jsonData.markers.items.length,\n        !(jsonData.markers &&\n                            (jsonData.markers.application && jsonData.markers.application.length &&\n                            jsonData.markers.definition && jsonData.markers.definition.length)));\n    super.parseChartAttr(dataObj);\n    config = iapi.config;\n\n    config.origMarginTop = pluckNumber(chartAttrs.charttopmargin, chartAttrs.maptopmargin, 11);\n    config.origMarginLeft = pluckNumber(chartAttrs.chartleftmargin, chartAttrs.mapleftmargin, 11);\n    config.origMarginBottom = pluckNumber(chartAttrs.chartbottommargin, chartAttrs.mapbottommargin, 11);\n    config.origMarginRight = pluckNumber(chartAttrs.chartrightmargin, chartAttrs.maprightmargin, 11);\n    config.labelsOnTop = pluckNumber(chartAttrs.entitylabelsontop, 1);\n    style = config.style;\n    inCancolor = style.inCancolor;\n    inCanFontFamily = style.inCanfontFamily;\n    inCanFontSize = style.inCanfontSize;\n    config.entityOpts = {\n      baseScaleFactor: config.baseScaleFactor,\n      dataLabels: {\n        style: {\n          fontFamily: inCanFontFamily,\n          fontSize: inCanFontSize,\n          lineHeight: style.inCanLineHeight,\n          color: pluck(chartAttrs.entitylabelcolor, style.inCancolor),\n          bgColor: pluck(chartAttrs.entitylabelbgcolor) || BLANK,\n          borderColor: pluck(chartAttrs.entitylabelbordercolor) || BLANK\n        }\n      },\n      fillColor: entityFillColor,\n      fillAlpha: entityFillAlpha,\n      fillRatio: entityFillRatio,\n      fillAngle: entityFillAngle,\n      borderColor: entityBorderColor,\n      borderAlpha: pluck(chartAttrs.entityborderalpha, chartAttrs.borderalpha, iapi.borderAlpha, '100'),\n      borderThickness: pluckNumber(chartAttrs.showentityborder, chartAttrs.showborder, 1)\n        ? pluckNumber(chartAttrs.entityborderthickness, chartAttrs.borderthickness, 1) : 0,\n      scaleBorder: pluckNumber(chartAttrs.scaleentityborder, chartAttrs.scaleborder, 0),\n      hoverFillColor: pluck(chartAttrs.entityfillhovercolor, chartAttrs.hoverfillcolor,\n        chartAttrs.hovercolor, palette.plothoverfillcolor),\n      hoverFillAlpha: pluck(chartAttrs.entityfillhoveralpha, chartAttrs.hoverfillalpha,\n        chartAttrs.hoveralpha, palette.plothoverfillalpha),\n      hoverFillRatio: pluck(chartAttrs.entityfillhoverratio, chartAttrs.hoverfillratio,\n        chartAttrs.hoverratio, palette.plothoverfillratio),\n      hoverFillAngle: pluck(chartAttrs.entityfillhoverangle, chartAttrs.hoverfillangle,\n        chartAttrs.hoverangle, palette.plothoverfillangle),\n      hoverBorderThickness: pluck(chartAttrs.entityborderhoverthickness, chartAttrs.hoverborderthickness),\n      hoverBorderColor: pluck(chartAttrs.entityborderhovercolor, entityBorderColor, palette.plotbordercolor),\n      hoverBorderAlpha: pluck(chartAttrs.entityborderhoveralpha, palette.plotborderalpha),\n\n      nullEntityColor: nullEntityColor,\n      nullEntityAlpha: pluck(chartAttrs.nullentityfillalpha, chartAttrs.nullentityalpha, entityFillAlpha),\n      nullEntityRatio: pluck(chartAttrs.nullentityfillratio, chartAttrs.nullentityratio, entityFillRatio),\n      nullEntityAngle: pluck(chartAttrs.nullentityfillangle, chartAttrs.nullentityangle, entityFillAngle),\n\n      connectorColor: pluck(chartAttrs.labelconnectorcolor, chartAttrs.connectorcolor, inCancolor),\n      connectorAlpha: pluck(chartAttrs.labelconnectoralpha, chartAttrs.connectoralpha, '100'),\n      connectorThickness: pluckNumber(chartAttrs.labelconnectorthickness, chartAttrs.borderthickness, 1),\n\n      showHoverEffect: pluckNumber(chartAttrs.showentityhovereffect, chartAttrs.usehovercolor,\n        chartAttrs.showhovereffect, 1),\n      hoverOnNull: pluckNumber(chartAttrs.hoveronnull, chartAttrs.entityhoveronnull, 1),\n\n      labelPadding: pluckNumber(chartAttrs.labelpadding, 5),\n      showLabels: pluckNumber(chartAttrs.showlabels, 1),\n      labelsOnTop: pluckNumber(chartAttrs.entitylabelsontop, 1),\n      includeNameInLabels: pluckNumber(chartAttrs.includenameinlabels, 1),\n      includeValueInLabels: pluckNumber(chartAttrs.includevalueinlabels, 0),\n      useSNameInTooltip: pluckNumber(chartAttrs.usesnameintooltip, 0),\n      useShortName: pluckNumber(chartAttrs.usesnameinlabels, 1),\n      labelSepChar: pluck(chartAttrs.labelsepchar, COMMASPACE),\n      showTooltip: pluckNumber(chartAttrs.showentitytooltip,\n        chartAttrs.showtooltip, 1),\n      tooltipSepChar: pluck(chartAttrs.tooltipsepchar, ', '),\n      tooltext: chartAttrs.entitytooltext,\n      hideNullEntities: pluckNumber(chartAttrs.hidenullentities, 0),\n      showHiddenEntityBorder: pluckNumber(chartAttrs.showhiddenentityborder, 1),\n      showNullEntityBorder: pluckNumber(chartAttrs.shownullentityborder, 1),\n      hiddenEntityColor: pluck(chartAttrs.hiddenentitycolor,\n        chartAttrs.hiddenentityfillcolor,\n        (chartAttrs.hiddenentityalpha ||\n                            chartAttrs.hiddenentityfillalpha\n          ? nullEntityColor : 'ffffff')),\n      hiddenEntityAlpha: pluck(chartAttrs.hiddenentityalpha,\n        chartAttrs.hiddenentityfillalpha, 0.001),\n\n      shadow: pluckNumber(chartAttrs.showshadow,\n        iapi.defaultPlotShadow, palette.shadow)\n    };\n\n    config.markerOpts = {\n      dataLabels: {\n        style: {\n          fontFamily: pluck(chartAttrs.markerfont, inCanFontFamily),\n          fontSize: pluckNumber(chartAttrs.markerfontsize, parseInt(inCanFontSize, 10)),\n          fontColor: pluck(chartAttrs.markerlabelcolor, chartAttrs.markerfontcolor, inCancolor),\n          labelBgColor: pluck(chartAttrs.markerlabelbgcolor) || BLANK,\n          labelBorderColor: pluck(chartAttrs.markerlabelbordercolor) || BLANK\n        }\n      },\n      showTooltip: pluckNumber(chartAttrs.showmarkertooltip, chartAttrs.showtooltip, 1),\n      showLabels: pluckNumber(chartAttrs.showmarkerlabels,\n        chartAttrs.showlabels, 1),\n      showHoverEffect: pluckNumber(chartAttrs.showmarkerhovereffect, 1),\n      labelPadding: pluck(chartAttrs.markerlabelpadding, '5'),\n      labelWrapWidth: pluckNumber(chartAttrs.markerlabelwrapwidth, 0),\n      labelWrapHeight: pluckNumber(chartAttrs.markerlabelwrapheight, 0),\n      fillColor: pluck(chartAttrs.markerfillcolor, chartAttrs.markerbgcolor,\n        palette.markerfillcolor), // has a legacy attr\n      fillAlpha: pluck(chartAttrs.markerfillalpha, palette.markerfillalpha),\n      fillAngle: pluck(chartAttrs.markerfillangle, palette.markerfillangle),\n      fillRatio: pluck(chartAttrs.markerfillratio, palette.markerfillratio),\n      fillPattern: pluck(chartAttrs.markerfillpattern, palette.markerbgpattern),\n      hoverFillColor: chartAttrs.markerfillhovercolor,\n      hoverFillAlpha: chartAttrs.markerfillhoveralpha,\n      hoverFillRatio: chartAttrs.markerfillhoverratio,\n      hoverFillAngle: chartAttrs.markerfillhoverangle,\n      borderThickness: pluck(chartAttrs.markerborderthickness, 1),\n      borderColor: pluck(chartAttrs.markerbordercolor, palette.markerbordercolor),\n      borderAlpha: pluckNumber(chartAttrs.markerborderalpha, palette.markerborderalpha),\n      hoverBorderThickness: chartAttrs.markerborderhoverthickness,\n      hoverBorderColor: chartAttrs.markerborderhovercolor,\n      hoverBorderAlpha: chartAttrs.markerborderhoveralpha,\n      radius: pluckNumber((chartAttrs.markerradius && trimString(chartAttrs.markerradius)), 7),\n      shapeId: pluck(chartAttrs.defaultmarkershape, SHAPE_CIRCLE),\n      labelSepChar: pluck(chartAttrs.labelsepchar, COMMASPACE),\n      tooltipSepChar: pluck(chartAttrs.tooltipsepchar, ', '),\n      autoScale: pluckNumber(chartAttrs.autoscalemarkers, 0),\n      tooltext: pluck(markerAttrs && markerAttrs.tooltext, chartAttrs.markertooltext),\n\n      /* Value related attributes */\n      dataEnabled: markerDataEnabled,\n      valueToRadius: pluckNumber(chartAttrs.markerradiusfromvalue, 1),\n      valueMarkerAlpha: pluck(chartAttrs.valuemarkeralpha, '75'),\n      hideNull: pluckNumber(chartAttrs.hidenullmarkers, 0),\n      nullRadius: pluckNumber(chartAttrs.nullmarkerradius, chartAttrs.markerradius, 7),\n      adjustViewPort: pluckNumber(chartAttrs.adjustviewportformarkers, 0),\n      startAngle: pluckNumber(chartAttrs.markerstartangle, 90),\n      maxRadius: pluckNumber(chartAttrs.maxmarkerradius, 0),\n      minRadius: pluckNumber(chartAttrs.minmarkerradius, 0),\n      applyAll: pluckNumber(chartAttrs.applyallmarkers, 0),\n      shadow: pluckNumber(chartAttrs.showmarkershadow,\n        chartAttrs.showshadow, 0)\n    };\n    config.connectorOpts = {\n      showHoverEffect: pluckNumber(chartAttrs.showconnectorhovereffect, 1),\n      thickness: pluckNumber(chartAttrs.connectorthickness,\n        chartAttrs.markerconnthickness, '2'),\n      color: pluck(chartAttrs.connectorcolor,\n        chartAttrs.markerconncolor, palette.markerbordercolor),\n      alpha: pluck(chartAttrs.connectoralpha,\n        chartAttrs.markerconnalpha, '100'),\n      hoverThickness: pluckNumber(chartAttrs.connectorhoverthickness,\n        chartAttrs.connectorthickness,\n        chartAttrs.markerconnthickness, '2'),\n      hoverColor: pluck(chartAttrs.connectorhovercolor,\n        chartAttrs.connectorcolor, chartAttrs.markerconncolor,\n        palette.markerbordercolor),\n      hoverAlpha: pluck(chartAttrs.connectorhoveralpha,\n        chartAttrs.connectoralpha, chartAttrs.markerconnalpha, '100'),\n      dashed: pluckNumber(chartAttrs.connectordashed,\n        chartAttrs.markerconndashed, 0),\n      dashLen: pluckNumber(chartAttrs.connectordashlen,\n        chartAttrs.markerconndashlen, 3),\n      dashGap: pluckNumber(chartAttrs.connectordashgap,\n        chartAttrs.markerconndashgap, 2),\n      font: pluck(chartAttrs.connectorfont,\n        chartAttrs.markerconnfont, inCanFontFamily),\n      fontColor: pluck(chartAttrs.connectorlabelcolor, chartAttrs.connectorfontcolor,\n        chartAttrs.markerconnfontcolor, inCancolor),\n      fontSize: pluckNumber(chartAttrs.connectorfontsize,\n        chartAttrs.markerconnfontsize,\n        parseInt(inCanFontSize, 10)),\n      showLabels: pluckNumber(chartAttrs.showconnectorlabels, chartAttrs.showmarkerlabels,\n        chartAttrs.showlabels, 1),\n      labelBgColor: pluck(chartAttrs.connectorlabelbgcolor,\n        chartAttrs.markerconnlabelbgcolor,\n        palette.plotfillcolor),\n      labelBorderColor: pluck(chartAttrs.connectorlabelbordercolor,\n        chartAttrs.markerconnlabelbordercolor,\n        palette.markerbordercolor),\n      shadow: pluckNumber(chartAttrs.showconnectorshadow,\n        chartAttrs.showmarkershadow,\n        chartAttrs.showshadow, 0),\n      showTooltip: pluckNumber(chartAttrs.showconnectortooltip,\n        chartAttrs.showmarkertooltip,\n        chartAttrs.showtooltip, 1),\n      tooltext: pluck(markerAttrs && markerAttrs.connectortooltext, chartAttrs.connectortooltext),\n      hideOpen: pluckNumber(chartAttrs.hideopenconnectors, 1)\n    };\n    config.adjustViewPortForMarkers = pluckNumber(chartAttrs.adjustviewportformarkers, markerDataEnabled);\n  }\n\n  /**\n   * Attach mouse events\n   */\n  _attachMouseEvents () {\n    let iapi = this,\n      listeners = iapi.getFromEnv('eventListeners'),\n      containerElem = iapi.getFromEnv('chart-container');\n\n    // adds to event stack.\n    listeners.push(domEvtHandler.listen(containerElem, hasTouch ? 'touchstart' : 'click', Maps.searchMouseMove, iapi));\n    listeners.push(domEvtHandler.listen(window.document, hasTouch ? 'touchstart' : 'mousemove', Maps.searchMouseMove, iapi));\n  }\n\n  _dispose () {\n    let iapi = this,\n      containerElem = iapi.getFromEnv('chart-container');\n\n    if (hasTouch) {\n      domEvtHandler.unlisten(containerElem, 'touchstart', Maps.searchMouseMove);\n      domEvtHandler.unlisten(window.document, 'touchstart', Maps.searchMouseMove);\n    }\n    domEvtHandler.unlisten(containerElem, 'click', Maps.searchMouseMove);\n    domEvtHandler.unlisten(window.document, 'mousemove', Maps.searchMouseMove);\n    super._dispose();\n  }\n\n  /**\n   * Searches for point on mouse move\n   * @param {Event} e mouse move event\n   */\n  static searchMouseMove (e) {\n    let mousePos,\n      chart = e.data,\n      chartConfig = chart.config,\n      datasets = chart.getDatasets(),\n      markers = datasets[1],\n      toolTipController = markers && markers.getFromEnv('toolTipController'),\n      currentToolTip = markers && markers.config.currentToolTip,\n      lastHoveredPoint = chart.config.lastHoveredPoint,\n      lastMouseCoordinate = {};\n\n    if (!chart.getFromEnv('chart-container') || chart.config.lastInteractionEvent === e.originalEvent) {\n      return;\n    }\n    chart.config.lastInteractionEvent = e.originalEvent;\n\n    // check if the event is fired within the canvas region.\n    if ((mousePos = isWithinCanvas(e, chart)) && mousePos.insideCanvas) {\n      // store the evnt object. This will be used to generate event on same coordinate\n      chartConfig.lastMouseEvent = e;\n      lastMouseCoordinate = {\n        x: mousePos.chartX,\n        y: mousePos.chartY\n      };\n\n      // search the best neighbouring point of the mouse moved point.\n      chart._searchNearestNeighbour(lastMouseCoordinate, e);\n    } else {\n      lastHoveredPoint && markers && markers.hoverOutFn(lastHoveredPoint.element);\n      chart.config.lastHoveredPoint = null;\n      toolTipController && toolTipController.hide(currentToolTip);\n    }\n  }\n\n  /**\n   * Searches for nearest point on mouse move using kdTree\n   * @param {Object} point point object\n   * @param {Event} event interaction event\n   */\n  _searchNearestNeighbour (point, event) {\n    let iapi = this,\n      // datasets = iapi.components.dataset,\n      datasets = iapi.getDatasets(),\n      markers = datasets[1],\n      kdPoint;\n\n    if (markers) {\n      if (!markers.components.kDTree) {\n        return;\n      }\n      // searches the nearest neighbouring point of the input point.\n      kdPoint = markers.getElement(point);\n      if (kdPoint) {\n        // iapi.config.lastHoveredPoint !== kdPoint && markers.highlightPoint(kdPoint, event);\n        markers.highlightPoint(kdPoint, event);\n      } else {\n        markers.highlightPoint(false, event);\n      }\n    }\n  }\n\n  /**\n   * Create group layers graphics\n   */\n  _createLayers () {\n    super._createLayers();\n    this._attachMouseEvents();\n  }\n  /**\n   * Function to parse background cosmetics\n   * @memberof GEO\n   */\n  _parseBackgroundCosmetics () {\n    let iapi = this,\n      background = iapi.getChildren('background')[0],\n      config = background.config,\n      // palette = iapi.components.colorPalette,\n      palette = iapi.getChildren('colorPalette')[0],\n      chartAttrs = iapi.getFromEnv('chart-attrib'),\n      showBorder;\n    showBorder = config.showBorder = pluckNumber(chartAttrs.showcanvasborder, 1);\n    config.borderWidth = showBorder ? pluckNumber(chartAttrs.canvasborderthickness, 1) : 0;\n    config.borderRadius = config.borderRadius = pluckNumber(chartAttrs.canvasborderradius, 0);\n    config.borderDashStyle = config.borderDashStyle = pluckNumber(chartAttrs.borderdashed, 0)\n      ? getDashStyle(pluckNumber(chartAttrs.borderdashlen, 4), pluckNumber(chartAttrs.borderdashgap, 2)) : DASH_DEF;\n    config.borderAlpha = pluck(chartAttrs.canvasborderalpha, palette.borderAlpha);\n    config.borderColor = config.borderColor = convertColor(pluck(chartAttrs.canvasbordercolor, palette &&\n            palette.borderColor), config.borderAlpha);\n  }\n\n  /**\n   * Function to create background cosmetics\n   * @return {Object} color object for background\n   * @memberof GEO\n   */\n  _getBackgroundCosmetics () {\n    let iapi = this,\n      chartAttrs = iapi.getFromEnv('chart-attrib') || iapi.jsonData.map,\n      palette = iapi.getChildren('colorPalette')[0];\n\n    return {\n      FCcolor: {\n        color: pluck(chartAttrs.bgcolor, chartAttrs.canvasbgcolor,\n          palette.bgcolor),\n        alpha: pluck(chartAttrs.bgalpha, chartAttrs.canvasbgalpha,\n          palette.bgalpha),\n        angle: pluck(chartAttrs.bgangle, chartAttrs.canvasbgangle,\n          palette.bgangle),\n        ratio: pluck(chartAttrs.bgratio, chartAttrs.canvasbgratio,\n          palette.bgratio)\n      }\n    };\n  }\n\n  /**\n   * Function to parse background cosmetics\n   * @memberof GEO\n   */\n  _parseCanvasCosmetics () {\n    super._parseCanvasCosmetics();\n    let iapi = this,\n      config = iapi.config,\n      chartAttrs = iapi.getFromEnv('chart-attrib') || iapi.jsonData.map,\n      // canvasConfig = components.canvas.config\n      canvasConfig = iapi.getChildren('canvas')[0].config;\n\n    // borderThickness = pluckNumber(chartAttrs.showborder, 1) ? pluckNumber(chartAttrs.borderthickness, 1) : 0;\n    // chart margins\n    config.origMarginTop = pluckNumber(chartAttrs.maptopmargin, 11);\n    config.origMarginLeft = pluckNumber(chartAttrs.mapleftmargin, 11);\n    config.origMarginBottom = pluckNumber(chartAttrs.mapbottommargin, 11);\n    config.origMarginRight = pluckNumber(chartAttrs.maprightmargin, 11);\n\n    config.origCanvasLeftMargin = pluckNumber(chartAttrs.canvasleftmargin, 0);\n    config.origCanvasRightMargin = pluckNumber(chartAttrs.canvasrightmargin, 0);\n    config.origCanvasTopMargin = pluckNumber(chartAttrs.canvastopmargin, 0);\n    config.origCanvasBottomMargin = pluckNumber(chartAttrs.canvasbottommargin, 0);\n\n    canvasConfig.canvasBorderRadius = pluckNumber(chartAttrs.canvasborderradius, 0);\n    // canvas padding\n    canvasConfig.origCanvasTopPad = pluckNumber(chartAttrs.canvastoppadding, 0);\n    canvasConfig.origCanvasBottomPad = pluckNumber(chartAttrs.canvasbottompadding, 0);\n    canvasConfig.origCanvasLeftPad = pluckNumber(chartAttrs.canvasleftpadding, 0);\n    canvasConfig.origCanvasRightPad = pluckNumber(chartAttrs.canvasrightpadding, 0);\n  }\n\n  /**\n   * Function to scale markers\n   * @return {Object} scaled coordinates\n   * @memberof GEO\n   */\n  preliminaryScaling () {\n    let iapi = this,\n      jsonData = iapi.jsonData,\n      markerArray = (jsonData.markers && jsonData.markers.items) || [],\n      i = (markerArray && markerArray.length) || 0,\n      minX = Infinity,\n      minY = Infinity,\n      maxX = -Infinity,\n      maxY = -Infinity,\n      x,\n      y,\n      item;\n\n    while (i--) {\n      item = markerArray[i];\n\n      x = Number(item.x);\n      y = Number(item.y);\n\n      minX = mathMin(minX, x);\n      minY = mathMin(minY, y);\n      maxX = mathMax(maxX, x);\n      maxY = mathMax(maxY, y);\n    }\n\n    return {\n      x: minX,\n      y: minY,\n      x1: maxX,\n      y1: maxY\n    };\n  }\n\n  /**\n   * [getScalingParameters description]\n   * @param {number} wg original width\n   * @param {number} hg original height\n   * @param {number} wv scaled width\n   * @param {number} hv scaled height\n   * @return {Object} scaled properties\n   */\n  getScalingParameters (wg, hg, wv, hv) {\n    let iapi = this,\n      aspR = wg / hg,\n      widthScaleR = (wv / (wg * iapi.config.baseScaleFactor)),\n      heightScaleR = (hv / (hg * iapi.config.baseScaleFactor)),\n      translateX = 0,\n      translateY = 0,\n      scaleFactor,\n      strokeWidth;\n\n    if (widthScaleR > heightScaleR) {\n      scaleFactor = heightScaleR;\n      translateX += (wv - (hv * aspR)) / 2;\n      strokeWidth = (200 / (hg * scaleFactor));\n    } else {\n      scaleFactor = widthScaleR;\n      translateY += (hv - (wv / aspR)) / 2;\n      strokeWidth = (200 / (wg * scaleFactor));\n    }\n\n    return {\n      scaleFactor: scaleFactor,\n      strokeWidth: strokeWidth,\n      translateX: translateX,\n      translateY: translateY\n    };\n  }\n\n  /**\n   * Calculates marker bounds (coordinates, dimention)\n   * @param {number} scaleFactor factor of scaling\n   * @param {number} xOffset x coordinate offset\n   * @param {number} yOffset y coordinate offset\n   * @return {Object} scaled coordinates\n   */\n  calculateMarkerBounds (scaleFactor, xOffset, yOffset) {\n    let iapi = this,\n      config = iapi.config,\n      markerOptions = config.markerOpts,\n      // datasets = iapi.components.dataset,\n      datasets = iapi.getDatasets(),\n      limits = iapi.getDataLimits(),\n      dataMin = limits.dataMin,\n      dataMax = limits.dataMax,\n      hideNull = markerOptions.hideNull,\n      nullRadius = markerOptions.nullRadius,\n      v2r = markerOptions.valueToRadius,\n      markerDataset,\n      markerConf,\n      minR,\n      maxR,\n      markerArray,\n      i,\n      name,\n      dataset,\n      len,\n      minX = Infinity,\n      minY = Infinity,\n      maxX = -Infinity,\n      maxY = -Infinity,\n      x,\n      y,\n      r,\n      definition,\n      item;\n\n    for (i = 0, len = datasets.length; i < len; i++) {\n      dataset = datasets[i];\n      name = dataset.getName();\n      if (name === 'markers') {\n        markerDataset = dataset;\n      }\n    }\n\n    if (markerDataset) {\n      markerDataset.calculateMarkerRadiusLimits();\n      markerConf = markerDataset.config || {};\n      minR = markerConf.minRadius;\n      maxR = markerConf.maxRadius;\n      markerArray = (markerDataset.components && markerDataset.components.markerObjs) || {};\n\n      for (i in markerArray) {\n        item = markerArray[i];\n        config = item.config;\n        definition = config.definition || {};\n        if (config.cleanValue !== null) {\n          if (v2r && definition.radius === UNDEF) {\n            config.radius = minR + ((maxR - minR) * (config.cleanValue - dataMin) /\n                                    (dataMax - dataMin));\n          }\n        } else {\n          if (hideNull) {\n            config.__hideMarker = true;\n          } else if (config.radius === null) {\n            config.radius = nullRadius;\n          }\n          continue;\n        }\n        r = Number(config.radius);\n        x = (Number(definition.x) + xOffset) * scaleFactor;\n        y = (Number(definition.y) + yOffset) * scaleFactor;\n\n        // These values will be scaled along with the graphic\n        minX = mathMin(minX, x - r);\n        minY = mathMin(minY, y - r);\n        maxX = mathMax(maxX, x + r);\n        maxY = mathMax(maxY, y + r);\n      }\n    }\n\n    return {\n      x: minX,\n      y: minY,\n      x1: maxX,\n      y1: maxY\n    };\n  }\n\n  /**\n   * calculate and allote space for various components\n   * every components are get notified with maximum space and then components return\n   * the available space.\n   * @memberof GEO\n   */\n  _spaceManager () {\n    let availableHeight,\n      iapi = this,\n      config = iapi.config,\n      legend = iapi.getChildren('legend') && iapi.getChildren('legend')[0],\n      gLegend = iapi.getChildren('gLegend') && iapi.getChildren('gLegend')[0],\n      legendPosition = legend && legend.config.legendPos ? legend.config.legendPos.split('-') : gLegend && gLegend.conf.legendPosition ? gLegend.conf.legendPosition.split('-') : [],\n      initSpace,\n      chartAttrs = iapi.getFromEnv('chart-attrib'),\n      showBorder = config.showBorder,\n      translateX = config.origMarginLeft,\n      translateY = config.origMarginTop,\n      wg = iapi.config.baseWidth,\n      hg = iapi.config.baseHeight,\n      scalingParams,\n      wv,\n      hv,\n      sFactor,\n      extraMarkerSpace = {},\n      xDifference = 0,\n      yDifference = 0,\n      initHv,\n      initWv,\n      allottedSpace,\n      topSpace,\n      markerOptions = config.markerOpts,\n      chartBorderWidth =\n                        config.borderWidth = showBorder ? pluckNumber(chartAttrs.borderthickness, 1) : 0;\n\n    iapi._allocateSpace({\n      top: chartBorderWidth,\n      bottom: chartBorderWidth,\n      left: chartBorderWidth,\n      right: chartBorderWidth\n    });\n    iapi._allocateSpace((iapi._manageActionBarSpace &&\n                    iapi._manageActionBarSpace(config.availableHeight * 0.225)) || {});\n\n    if (legendPosition[0] === 'right' || legendPosition[0] === 'left') {\n      allottedSpace = config.canvasWidth * 0.3;\n    } else {\n      allottedSpace = config.canvasHeight * 0.3;\n    }\n    initSpace = legendPosition[0] === POSITION_TOP || legendPosition[0] === POSITION_BOTTOM ? config.canvasHeight : config.canvasWidth;\n    config.showLegend && iapi._manageLegendSpace(allottedSpace);\n    availableHeight = (legendPosition[0] === POSITION_BOTTOM || legendPosition[0] === POSITION_TOP) ? config.canvasHeight * 0.225\n      : config.canvasWidth * 0.225;\n\n    // need to translate plot bottom side when legendPosition: top-*\n    if (legendPosition[0] === 'top') {\n      translateY += initSpace - config.canvasHeight;\n    }\n\n    // a space manager that manages the space for the tools as well as the captions.\n    topSpace = iapi._manageChartMenuBar(availableHeight);\n\n    // need to translate plot right side when legendPosition: left-*\n    if (legendPosition[0] === 'left') {\n      translateX += initSpace - config.canvasWidth;\n    }\n\n    wv = config.canvasWidth;\n    hv = config.canvasHeight;\n    if (markerOptions.dataEnabled) {\n      if (config.adjustViewPortForMarkers) {\n        // Calculate the overflow of the scaled properties (x, y)\n        extraMarkerSpace = iapi.preliminaryScaling();\n\n        if (extraMarkerSpace.x1 > wg) {\n          wg = extraMarkerSpace.x1;\n        }\n\n        if (extraMarkerSpace.x < 0) {\n          wg += (-extraMarkerSpace.x);\n          xDifference = (-extraMarkerSpace.x);\n        }\n\n        if (extraMarkerSpace.y1 > hg) {\n          hg = extraMarkerSpace.y1;\n        }\n\n        if (extraMarkerSpace.y < 0) {\n          hg += (-extraMarkerSpace.y);\n          yDifference = (-extraMarkerSpace.y);\n        }\n\n        // Get the scale factor and translate factors\n        scalingParams = iapi.getScalingParameters(wg, hg, wv, hv);\n\n        // Assign radii to the markers that have a value but no radius.\n        // Calculate the overflow of the radius (unscaled property).\n        extraMarkerSpace = iapi.calculateMarkerBounds(\n          scalingParams.scaleFactor * iapi.config.baseScaleFactor, xDifference, yDifference);\n\n        /**\n                         * @todo: Check if the wv and hv become less than a certain limit.\n                         * If they do reduce the radii of the markers.\n                         */\n        initHv = hv;\n        initWv = wv;\n\n        if (extraMarkerSpace.x < 0) {\n          translateX += (-extraMarkerSpace.x);\n          wv += extraMarkerSpace.x;\n        }\n\n        if (extraMarkerSpace.y < 0) {\n          translateY += (-extraMarkerSpace.y);\n          hv += extraMarkerSpace.y;\n        }\n\n        if (extraMarkerSpace.x1 > initWv) {\n          wv -= (extraMarkerSpace.x1 - initWv);\n        }\n\n        if (extraMarkerSpace.y1 > initHv) {\n          hv -= (extraMarkerSpace.y1 - initHv);\n        }\n      } else {\n        // Get the scale factor and translate factors\n        scalingParams = iapi.getScalingParameters(wg, hg, wv, hv);\n\n        // Assign radii to the markers that have a value but no radius.\n        // Calculate the overflow of the radius (unscaled property).\n        iapi.calculateMarkerBounds(scalingParams.scaleFactor * iapi.config.baseScaleFactor,\n          xDifference, yDifference);\n      }\n\n      // Recalculate the scale factor after accounting for radii.\n      scalingParams = iapi.getScalingParameters(wg, hg, wv, hv);\n      translateX += (xDifference * scalingParams.scaleFactor * iapi.config.baseScaleFactor);\n      translateY += (yDifference * scalingParams.scaleFactor * iapi.config.baseScaleFactor);\n    } else {\n      scalingParams = iapi.getScalingParameters(wg, hg, wv, hv);\n    }\n    iapi.config.scalingParams = scalingParams;\n    sFactor = scalingParams.scaleFactor;\n    scalingParams.translateX = scalingParams.translateX + translateX;\n    scalingParams.translateY = scalingParams.translateY + translateY + topSpace.top || 0;\n    scalingParams.sFactor = (sFactor * iapi.config.baseScaleFactor * 100) / 100;\n    scalingParams.transformStr = ['t', scalingParams.translateX, ',', scalingParams.translateY,\n      's', sFactor, ',', sFactor, ',0,0'].join('');\n\n    iapi.config.annotationConfig = {\n      id: 'Geo',\n      showbelow: 0,\n      autoscale: 0,\n      grpxshift: (scalingParams.translateX ? scalingParams.translateX : 0),\n      grpyshift: (scalingParams.translateY ? scalingParams.translateY : 0),\n      xscale: (sFactor ? sFactor * iapi.config.baseScaleFactor : 1) * 100,\n      yscale: (sFactor ? sFactor * iapi.config.baseScaleFactor : 1) * 100,\n      scaletext: 1,\n      // centeralign: 1,\n      options: { useTracker: true }\n    };\n  }\n\n  /**\n   * Function to calculate the lower and upper limit of data\n   * @return {Object} data minimum, maximum value\n   * @memberof GEO\n   */\n  getDataLimits () {\n    let iapi = this,\n      datasets = iapi.getDatasets(),\n      length = datasets.length,\n      dataset,\n      dataMin = +Infinity,\n      dataMax = -Infinity,\n      limits,\n      i;\n    for (i = 0; i < length; i++) {\n      dataset = datasets[i];\n      limits = dataset.getDataLimits();\n      dataMin = mathMin(dataMin, limits.min);\n      dataMax = mathMax(dataMax, limits.max);\n    }\n    return {\n      dataMin: dataMin,\n      dataMax: dataMax\n    };\n  }\n\n  /**\n   * Return copy of entity paths\n   * @param {boolean} copy whether to copy or return the original object\n   * @return {Object} entity path object\n   */\n  getEntityPaths (copy) {\n    let returnObj = {},\n      ents = this.config.entities,\n      id;\n\n    if (copy) {\n      for (id in ents) {\n        returnObj[id] = ents[id];\n      }\n      return returnObj;\n    }\n    return ents;\n  }\n\n  /**\n   * Check if rendering is complete\n   * @memberof GEO\n   */\n  checkComplete () {\n    let iapi = this;\n\n    // iapi.config.labelDrawCount = 0;\n    if (iapi.config.entityFlag && iapi.config.entitiesReady) {\n      iapi.config.entityFlag = false;\n      iapi.config.markersDrawn = true;\n      iapi.fireChartInstanceEvent('internal.mapdrawingcomplete', {\n        renderer: iapi\n      });\n    }\n  }\n}\nexport default Maps;\n","import { componentFactory, datasetFactory } from '@fusioncharts/core/src/lib';\nimport Entities from '../dataset/entities';\nimport Markers from '../dataset/markers';\nimport MapGroup from '../dataset/groups/map-group';\n/**\n * this is simple dataset factory. It instantiate maps\n * @param {Object} chart chart API\n */\nexport default function (chart) {\n  var mapGroupManager,\n    dataObj = chart.getFromEnv('dataSource'),\n    entityJSONData = dataObj.data || {},\n    markerJSONData = dataObj.markers;\n\n  componentFactory(chart, MapGroup, 'mapGroup');\n  mapGroupManager = chart.getChildren('mapGroup')[0];\n  datasetFactory(mapGroupManager, Entities, 'entities', 1, [entityJSONData]);\n  if (markerJSONData) {\n    datasetFactory(mapGroupManager, Markers, 'markers', 1, [markerJSONData]);\n  } else {\n    chart.getDatasets()[1] && chart.getDatasets()[1].remove();\n  }\n}\n","/* eslint require-jsdoc: 'error', valid-jsdoc: [\"error\", { \"requireReturn\": false }] */\nimport { ComponentInterface } from '@fusioncharts/core/src/component-interface';\nimport Annotation from '@fusioncharts/features/src/annotation/ext-annotation';\nimport { addDep, getDep } from '@fusioncharts/core/src/dependency-manager';\nimport mapsAnimation from '../_internal/map-entities.animation';\nimport { pluck, imprint, extend2, parseTooltext, pluckNumber, parseUnsafeString, hasSVG, toRaphaelColor,\n  trimString, convertColor } from '@fusioncharts/core/src/lib';\nimport { priorityList } from '@fusioncharts/core/src/schedular';\nimport raphaelShapesLitepath from '@fusioncharts/core/src/_internal/redraphael/redraphael-shapes/redraphael-shapes.litepath';\n\nlet Raphael = getDep('redraphael', 'plugin'),\n  UNDEF,\n  userAgent = window.navigator.userAgent,\n  isIE = /msie/i.test(userAgent) && !window.opera,\n\n  COMMA = ',',\n  BLANK = '',\n  POSITION_TOP = 'top',\n  POSITION_BOTTOM = 'bottom',\n  POSITION_RIGHT = 'right',\n  POSITION_LEFT = 'left',\n  POSITION_MIDDLE = 'middle',\n  POSITION_CENTER = 'center',\n  ENTITYLABEL = 'entityLabel',\n  TEXT_STR = 'text',\n\n  CRISP = 'crisp',\n\n  math = window.Math,\n  mathMin = math.min,\n  mathMax = math.max,\n\n  isStrokeReg = /stroke/ig,\n  isWebKit = /AppleWebKit/.test(userAgent),\n  mathCeil = math.ceil,\n\n  colorize = function (original, obj) {\n    let col = !obj ? {\n      FCcolor: original\n    } : extend2(original.FCcolor, obj, false, true);\n\n    col.toString = toRaphaelColor;\n    return col;\n  },\n\n  pruneStrokeAttrs = function (obj, thicknessModifier) {\n    let key,\n      returnObj = {},\n      finalThicknessModifier;\n\n    finalThicknessModifier = thicknessModifier || 1;\n\n    if (!obj || typeof obj !== 'object') {\n      return returnObj;\n    }\n\n    for (key in obj) {\n      if (!isStrokeReg.test(key)) {\n        if (key === 'stroke-width') {\n          returnObj[key] = Number(obj[key]) / finalThicknessModifier;\n\n          if (isWebKit) {\n            // webkit issue fix\n            returnObj[key] = (returnObj[key] && mathCeil(returnObj[key])) || 0;\n          }\n        } else {\n          returnObj[key] = obj[key];\n        }\n      }\n    }\n\n    return returnObj;\n  },\n\n  getTextWrapWidth = {\n    right: function () {\n      // return x value\n      return arguments[1];\n    },\n    left: function (w, x) {\n      return w - x;\n    },\n    center: function (w, x) {\n      return mathMin(x, w - x) * 2;\n    }\n  },\n\n  getTextWrapHeight = {\n    top: function () {\n      // returns y value\n      return arguments[1];\n    },\n    middle: function (h, y) {\n      return mathMin(y, h - y) * 2;\n    },\n    bottom: function (h, y) {\n      return h - y;\n    }\n  },\n\n  /**\n   * set attribute to entity grphics\n   * @param {Object} entityObj paricular entity object\n   * @param {Object} attrs set of attributes to be applied\n   */\n  setCustomAttrs = (entityObj, attrs) => {\n    entityObj && entityObj.graphics.outlines.attr(attrs);\n  },\n\n  convertArrayToIdMap = function (arr) {\n    let i = (arr && arr.length) || 0,\n      ret = {},\n      item;\n\n    while (i--) {\n      item = arr[i];\n      if (item.id !== UNDEF) {\n        ret[item.id.toLowerCase()] = item;\n      }\n    }\n\n    return ret;\n  };\naddDep({\n  name: 'mapsAnimation',\n  type: 'animationRule',\n  extension: mapsAnimation\n});\n\n// Adding required shapes for chart.\nraphaelShapesLitepath(Raphael);\n\n/**\n * Cretaes class Entities to render map entities\n */\nclass Entities extends ComponentInterface {\n  /**\n   * Creates an instance of Entities\n   */\n  constructor () {\n    super();\n    this.components = {};\n  }\n\n  /**\n   * Returns the name of the component\n   * @return {string} name of the component\n   */\n  getName () {\n    return 'entities';\n  }\n\n  /**\n   * Returns the type of the component\n   * @return {string} type of the component\n   */\n  getType () {\n    return 'dataset';\n  }\n\n  /**\n   * Configures the entities\n   * @param {Object} entityJSONDataOb JSON for dataset configurations\n   */\n  configureAttributes (entityJSONDataOb) {\n    if (!entityJSONDataOb) {\n      return;\n    }\n    this.JSONData = {\n      data: entityJSONDataOb\n    };\n    let dataset = this,\n      chart = dataset.getFromEnv('chart'),\n      rawData = chart.jsonData,\n      conf = dataset.config,\n      mapAttrs = rawData.map || rawData.chart,\n      entityJSONData,\n      entities,\n      dataItem,\n      entityItem,\n      item,\n      minMaxArray = [],\n      minMaxArrayLen,\n      i,\n      d,\n      colorManager = dataset.getFromEnv('colorManager'),\n      entityDef = rawData.entitydef || [];\n\n    if (!conf.attachEvent && colorManager) {\n      dataset.addExtEventListener('legendUpdate', function () {\n        d = arguments[1];\n        if (d.component === 'legend') {\n          dataset.legendInteractivity(d.legendItem, d.colorObj);\n        } else {\n          minMaxArray = d.maxMinArray;\n          minMaxArrayLen = minMaxArray.length;\n          for (i = 0; i < minMaxArrayLen; i++) {\n            dataset.updateEntityColors(minMaxArray[i].min, minMaxArray[i].max);\n          }\n        }\n      }, colorManager);\n      conf.attachEvent = true;\n    }\n\n    if (rawData.data && rawData.data[0] && rawData.data[0].data) {\n      entityJSONData = dataset.JSONData = rawData.data[0].data || [];\n    } else {\n      entityJSONData = dataset.JSONData = rawData.data || [];\n    }\n    conf.useSNameAsId = pluckNumber(mapAttrs.usesnameasid, 0);\n    this._redefineEntities(entityDef);\n    entities = dataset.components.data;\n    conf.showTooltip = pluckNumber(mapAttrs.showtooltip, 1);\n    conf.showHoverEffect = pluckNumber(mapAttrs.showhovereffect, 0);\n    entityJSONData = convertArrayToIdMap(entityJSONData);\n    dataset.calculateDataLimits();\n\n    !rawData.colorrange &&\n      dataset._detachChild(dataset.getChildren('colorRange') && dataset.getChildren('colorRange')[0]);\n\n    for (item in entities) {\n      dataItem = entityJSONData[item];\n      entityItem = entities[item];\n      if (dataItem) {\n        // Work on a copy of dataItem\n        this._configureEntity(item, entityItem,\n          imprint(Entities._sanitizeEntityOptions(extend2({}, dataItem)), entityItem.config));\n      } else {\n        this._configureEntity(item, entityItem, entityItem.config);\n      }\n    }\n  }\n\n  /**\n   * Function to update entity colors\n   * @param {number} minValue minimum value of range selected\n   * @param {number} maxValue maximum value of range selected\n   */\n  updateEntityColors (minValue, maxValue) {\n    let dataset = this,\n      entities = dataset.components.data,\n      chart = dataset.getFromEnv('chart'),\n      { nullEntityAlpha, nullEntityColor } = chart.config.entityOpts,\n      entityObj,\n      config,\n      value,\n      name,\n      alphaArr,\n      visibleEntityAttr,\n      nullAttr = colorize({\n        fill: nullEntityColor,\n        alpha: nullEntityAlpha\n      }),\n      hiddenAttr = {\n        'fill-opacity': 0\n      };\n\n    // For all entities of the map\n    for (name in entities) {\n      if (entities.hasOwnProperty(name)) {\n        entityObj = entities[name];\n        config = entityObj.config;\n        value = config.cleanValue;\n        alphaArr = config.alphaArr || [];\n        visibleEntityAttr = {\n          'fill-opacity': (alphaArr[0] / 100) || 1\n        };\n\n        if (value == null) {\n          // If a value is undefined or null\n          setCustomAttrs(entityObj, nullAttr);\n          // A null entity is, surprisingly enough, not hidden.\n          // It is instead visible with null attributes applied to it.\n          entityObj.hidden = false;\n        } else if (value < minValue || value > maxValue) {\n          // If a value is outside the range\n          setCustomAttrs(entityObj, hiddenAttr);\n          // An entity with out-of-range values is hidden\n          entityObj.hidden = true;\n        } else {\n          // If value is valid and is inside the range\n          setCustomAttrs(entityObj, visibleEntityAttr);\n          // An entity with valid values is, obviously, not hidden\n          entityObj.hidden = false;\n        }\n      }\n    }\n  }\n\n  /**\n   * Function that deals with all interactions associated with a map\n   * @param {Object} legendItem corresponding legend item\n   * @param {Object} entityColorObj color object of a aparticular entity\n   * @memberof Entities\n   */\n  legendInteractivity (legendItem, entityColorObj) {\n    let dataset = this,\n      chart = dataset.getFromEnv('chart'),\n      entities = dataset.components.data,\n      i,\n      entity,\n      config = legendItem.config,\n      visible = legendItem.hasState('hidden'),\n      cleanValue,\n      colorRange = dataset.getFromEnv('colorManager'),\n      entityAttrs,\n      visibleEntityAttr = {},\n      applyAttr,\n      hiddenAttr = {\n        'fill-opacity': 0\n      },\n      colorObj;\n    chart.getFromEnv('animationManager').setAnimationState('legendInteraction');\n    for (i in entities) {\n      if (entities.hasOwnProperty(i)) {\n        entity = entities[i];\n        config = entity.config;\n        cleanValue = config.cleanValue;\n        colorObj = colorRange.getColorObj(cleanValue);\n        entityAttrs = config.visibleEntityAttr;\n        visibleEntityAttr['fill-opacity'] = entityAttrs['fill-opacity'];\n        applyAttr = !visible ? hiddenAttr : visibleEntityAttr;\n        if (entityColorObj.code === (!colorObj.outOfRange && colorObj.code)) {\n          entity.hidden = !visible;\n          setCustomAttrs(entity, applyAttr);\n          if (!visible) {\n            legendItem.setLegendState('hidden');\n          } else {\n            legendItem && legendItem.removeLegendState('hidden');\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Calculates the data limits for chart\n   * @memberof Entities\n   */\n  calculateDataLimits () {\n    let dataset = this,\n      chart = dataset.getFromEnv('chart'),\n      conf = dataset.config,\n      jsonData = chart.jsonData,\n      dataArr = jsonData.data || [],\n      // numberFormatter = chart.components.numberFormatter,\n      numberFormatter = this.getFromEnv('number-formatter'),\n      cleanValue,\n      value,\n      minValue = +Infinity,\n      maxValue = -Infinity,\n      len,\n      i;\n    for (i = 0, len = dataArr.length; i < len; i++) {\n      value = dataArr[i].value;\n      cleanValue = numberFormatter.getCleanValue(value);\n      minValue = mathMin(minValue, cleanValue);\n      maxValue = mathMax(maxValue, cleanValue);\n    }\n    conf.max = maxValue;\n    conf.min = minValue;\n  }\n\n  /**\n   * Configures particular entity\n   * @param {number} id entity id\n   * @param {Object} entityItem particular entity object\n   * @param {Object} entityJSON entity JSON object\n   */\n  _configureEntity (id, entityItem, entityJSON) {\n    let dataset = this,\n      chart = dataset.getFromEnv('chart'),\n      conf = dataset.config,\n      numberFormatter = this.getFromEnv('number-formatter'),\n      chartConf = chart.config,\n      entityOpts = chartConf.entityOpts,\n      entityConf = entityItem.config,\n      labelConfig = entityItem.labelConfig,\n      value = entityJSON.value,\n      cleanValue = entityConf.cleanValue = numberFormatter.getCleanValue(value),\n      formattedValue = entityConf.formattedValue =\n                      cleanValue !== UNDEF ? numberFormatter.dataLabels(cleanValue) : UNDEF,\n      showTooltip = pluckNumber(entityJSON.showtooltip, entityOpts.showTooltip),\n      defaultTooltip = this._getDefaultTooltip(entityItem, entityJSON, dataset),\n      tooltextMacroObj = {\n        formattedValue: formattedValue,\n        sName: entityJSON.shortLabel,\n        lName: entityJSON.label\n      },\n      styleObj = entityOpts.dataLabels.style,\n      toolText = entityConf.toolText = showTooltip\n        ? parseUnsafeString(pluck(parseTooltext(\n          pluck(entityJSON.tooltext, entityOpts.tooltext, defaultTooltip),\n          [1, 2, 7, 38, 39],\n          tooltextMacroObj,\n          entityJSON)), false)\n        : BLANK,\n      borderColor = entityConf.borderColor = pluck(entityJSON.bordercolor, entityOpts.borderColor),\n      borderAlpha = entityConf.borderAlpha = pluck(entityJSON.borderalpha, entityOpts.borderAlpha),\n      borderThickness = entityConf.borderThickness =\n                      pluckNumber(entityJSON.borderthickness, entityOpts.borderThickness),\n      hoverOnNull = entityOpts.hoverOnNull,\n      useHoverColor = entityConf.useHoverColor = pluckNumber(entityJSON.showhovereffect,\n        entityJSON.usehovercolor,\n        (hoverOnNull ? entityOpts.showHoverEffect : isNaN(value) ? 0 : entityOpts.showHoverEffect)),\n      labelAlignment = entityConf.labelAlignment,\n      colorManager = dataset.getFromEnv('colorManager'),\n      colorObj,\n      link,\n      align,\n      valign,\n      color,\n      alpha,\n      angle,\n      ratio,\n      fillColor,\n      fontColor,\n      fontFamily,\n      fontBold,\n      emptyColorObject,\n      fillColorObject,\n      hoverColor,\n      bgColor,\n      bgAlpha,\n      labels,\n      labelObj,\n      oriLabels,\n      i,\n      alphaArr;\n\n    // Reset the hidden flag so that on data update entity item gets visible\n    entityItem.hidden = false;\n    entityConf.showLabel = pluckNumber(entityJSON.showlabel, entityOpts.showLabels);\n    entityConf.labelPadding = pluckNumber(entityJSON.labelpadding,\n      entityOpts.labelPadding);\n    entityConf.fontFamily = pluck(entityJSON.font, styleObj.fontFamily);\n    entityConf.fontSize = pluckNumber(parseInt(entityJSON.fontsize, 10),\n      parseInt(styleObj.fontSize, 10));\n    entityConf.fontBold = pluckNumber(entityJSON.fontbold, 0);\n    // fontcolor is deprecated.\n    entityConf.fontColor = pluck(entityJSON.labelcolor, entityJSON.fontcolor, styleObj.color);\n    entityConf.labelBgColor = pluck(entityJSON.labelbgcolor, styleObj.bgColor) || BLANK;\n    entityConf.labelBorderColor = pluck(entityJSON.labelbordercolor, styleObj.borderColor) || BLANK;\n    entityConf.connectorColor = pluck(entityJSON.labelconnectorcolor,\n      entityOpts.connectorColor);\n    entityConf.connectorAlpha = pluck(entityJSON.labelconnectoralpha,\n      entityOpts.connectorAlpha);\n    entityConf.hoverBorderThickness = pluckNumber(entityJSON.borderhoverthickness,\n      entityJSON.hoverborderthickness, entityOpts.hoverBorderThickness);\n    entityConf.hoverBorderColor = pluck(entityJSON.borderhovercolor, entityJSON.hoverbordercolor,\n      entityOpts.hoverBorderColor, entityConf.borderColor);\n    entityConf.hoverBorderAlpha = pluck(entityJSON.borderhoveralpha, entityJSON.hoverborderalpha,\n      entityOpts.hoverBorderAlpha, entityConf.borderAlpha);\n    entityConf.connectorThickness = pluckNumber(entityJSON.labelconnectorthickness,\n      entityOpts.connectorThickness);\n    entityConf.origConnectorThickness = entityConf.connectorThickness;\n    entityConf.borderThickness = borderThickness;\n    entityConf.link = entityJSON.link;\n    entityConf.isVisible = true;\n    entityConf.id = id;\n    entityConf.originalId = entityJSON.origId;\n    if (cleanValue !== null) {\n      colorObj = colorManager && colorManager.getColor(cleanValue);\n      if (colorObj && !colorObj.outOfRange) {\n        bgColor = colorObj.code;\n        if (colorObj.oriAlpha !== UNDEF) {\n          bgAlpha = colorObj.oriAlpha + '';\n        }\n      }\n    }\n\n    if (pluck(entityJSON.color, entityJSON.alpha,\n      entityJSON.angle, entityJSON.ratio) !== UNDEF) {\n      color = pluck(entityJSON.color, bgColor, entityOpts.fillColor);\n      alpha = pluck(entityJSON.alpha, bgAlpha, entityOpts.fillAlpha);\n      angle = pluck(entityJSON.angle, entityOpts.fillAngle);\n      ratio = pluck(entityJSON.ratio, entityOpts.fillRatio);\n\n      fillColor = colorize({\n        color: color,\n        alpha: alpha,\n        angle: angle,\n        ratio: ratio\n      });\n    } else {\n      fillColorObject = colorize({\n        color: pluck(bgColor, entityOpts.fillColor),\n        alpha: pluck(bgAlpha, entityOpts.fillAlpha),\n        angle: pluck(entityOpts.fillAngle),\n        ratio: pluck(entityOpts.fillRatio)\n      });\n\n      emptyColorObject = colorize({\n        color: pluck(entityOpts.nullEntityColor),\n        alpha: pluck(entityOpts.nullEntityAlpha),\n        angle: pluck(entityOpts.nullEntityAngle),\n        ratio: pluck(entityOpts.nullEntityRatio)\n      });\n\n      // If value is null then set empty color for entity\n      fillColor = cleanValue === null ? emptyColorObject : fillColorObject;\n      color = fillColor.FCcolor.color;\n      alpha = fillColor.FCcolor.alpha;\n      angle = fillColor.FCcolor.angle;\n      ratio = fillColor.FCcolor.ratio;\n    }\n    // Need to re-check whether tooltip is to be shown for blank\n    // tooltext\n    if (toolText === BLANK) {\n      conf.showTooltip = 0;\n    }\n\n    entityConf.visibleEntityAttr = {\n      stroke: convertColor(borderColor, borderAlpha),\n      fill: (entityConf.fillColor = fillColor).toString(),\n      'fill-opacity': alpha / 100\n    };\n\n    alphaArr = alpha.split(COMMA);\n\n    // if (borderThickness) {\n    //     alphaArr.push(borderAlpha);\n    // }\n    entityConf.alphaArr = alphaArr;\n\n    if (useHoverColor) {\n      if (pluck(entityJSON.fillhovercolor, entityJSON.fillhoveralpha, entityJSON.fillhoverangle,\n        entityJSON.fillhoverratio, entityJSON.hoverfillcolor, entityJSON.hoverfillalpha,\n        entityJSON.hoverfillratio, entityJSON.hoverfillangle) !== UNDEF) {\n        color = pluck(entityJSON.fillhovercolor, entityJSON.hoverfillcolor, entityOpts.hoverFillColor);\n        alpha = pluck(entityJSON.fillhoveralpha, entityJSON.hoverfillalpha, entityOpts.hoverFillAlpha);\n        angle = pluck(entityJSON.fillhoverangle, entityJSON.hoverfillangle, entityOpts.hoverFillAngle);\n        ratio = pluck(entityJSON.fillhoverratio, entityJSON.hoverfillratio, entityOpts.hoverFillRatio);\n\n        hoverColor = colorize({\n          color: color,\n          alpha: alpha,\n          angle: angle,\n          ratio: ratio\n        });\n      } else {\n        if (!entityOpts.hoverColorObject) {\n          entityOpts.hoverColorObject = colorize({\n            color: entityOpts.hoverFillColor,\n            alpha: entityOpts.hoverFillAlpha,\n            angle: entityOpts.hoverFillAngle,\n            ratio: entityOpts.hoverFillRatio\n          });\n        }\n\n        hoverColor = entityOpts.hoverColorObject;\n      }\n\n      entityConf.hoverColor = hoverColor;\n    }\n\n    // Entity Label configurations\n    !labelConfig && (labelConfig = entityItem.labelConfig = {});\n    fontColor = entityConf.fontColor;\n    fontFamily = entityConf.fontFamily;\n    fontBold = entityConf.fontBold;\n    toolText = entityConf.toolText;\n    link = entityConf.link;\n\n    if (labelAlignment) {\n      // labelPadding neednt be scaleFactored.\n      align = labelAlignment[0];\n      valign = labelAlignment[1];\n    } else {\n      align = POSITION_CENTER;\n      valign = POSITION_MIDDLE;\n    }\n    labelConfig.align = align;\n    labelConfig.vAlign = valign;\n    labelConfig.fontColor = fontColor;\n    labelConfig.bgColor = entityConf.labelBgColor;\n    labelConfig.borderColor = entityConf.labelBorderColor;\n    labelConfig.fontFamily = fontFamily;\n    labelConfig.fontBold = fontBold;\n    labelConfig.toolText = toolText;\n    labelConfig.link = link;\n\n    if (typeof entityConf.options === 'object') {\n      labels = entityConf.entityLabels = entityConf.entityLabels || [];\n\n      oriLabels = entityConf.labels || [];\n\n      i = oriLabels.length;\n\n      while (i--) {\n        if (!labels[i]) {\n          labels[i] = {\n            config: {}\n          };\n        }\n        labelConfig = labels[i].config;\n        labelAlignment = oriLabels[i].labelAlignment;\n        if (labelAlignment) {\n          // labelPadding neednt be scaleFactored.\n          align = labelAlignment[0];\n          valign = labelAlignment[1];\n        } else {\n          align = POSITION_CENTER;\n          valign = POSITION_MIDDLE;\n        }\n        labelConfig.align = align;\n        labelConfig.vAlign = valign;\n        labelConfig.displayValue = dataset.getDisplayValue(entityItem, oriLabels[i],\n          entityConf.options.isDataEnabled, !i, entityJSON);\n\n        labelConfig.toolText = toolText;\n        labelConfig.align = align;\n        labelConfig.vAlign = valign;\n        labelConfig.bgColor = entityConf.labelBgColor;\n        labelConfig.borderColor = entityConf.labelBorderColor;\n        labelConfig.fontColor = fontColor;\n        labelConfig.fontFamily = fontFamily;\n        labelConfig.fontBold = fontBold;\n        labelConfig.toolText = toolText;\n      }\n    } else {\n      labelObj = {\n        shortText: entityConf.shortLabel,\n        text: entityConf.label\n      };\n      labelConfig.displayValue = dataset.getDisplayValue(entityItem, labelObj, true, true, entityJSON);\n    }\n  }\n\n  /**\n   * Return display value of entity labels\n   * @param {Object} entity entity item\n   * @param {Object} labelObj [description]\n   * @param {boolean} userValue whether to parse user value or not\n   * @param {boolean} userDV whether to parse user display value or not\n   * @param {Object} entityJSON raw JSON for entities\n   * @return {string} display value of entity labels\n   */\n  getDisplayValue (entity, labelObj, userValue, userDV, entityJSON) {\n    let chart = this.getFromEnv('chart'),\n      entityOpts = chart.config.entityOpts,\n      entityConf = entity.config,\n      cleanValue = entityConf.cleanValue,\n      formattedValue = entityConf.formattedValue,\n      labelSepChar = entityOpts.labelSepChar,\n      displayValue;\n    // Parsing display Value\n    if (userValue) {\n      if (userDV && typeof entityJSON.displayvalue !== 'undefined') {\n        displayValue = entityJSON.displayvalue;\n      } else {\n        displayValue = pluck((entityOpts.includeNameInLabels\n          ? (entityOpts.useShortName\n            ? labelObj.shortText : labelObj.text) : ''));\n\n        if (entityOpts.includeValueInLabels && cleanValue !== null) {\n          displayValue = (displayValue === UNDEF) ? formattedValue\n            : (displayValue + labelSepChar + formattedValue);\n        }\n      }\n    } else {\n      displayValue = entityConf.label;\n    }\n    return displayValue;\n  }\n\n  /**\n   * Function that clears all entity options\n   * @param {Object} options configuration object\n   * @return {Object} configuration object\n   */\n  static _sanitizeEntityOptions (options) {\n    delete options.outlines;\n    delete options.label;\n    delete options.shortlabel;\n    delete options.labelposition;\n    delete options.labelalignment;\n    delete options.labelconnectors;\n\n    return options;\n  }\n\n  /**\n   * Redifines entities on update\n   * @param {Object} entityDef entity definitions\n   */\n  _redefineEntities (entityDef) {\n    let dataset = this,\n      conf = dataset.config,\n      chart = dataset.getFromEnv('chart'),\n      redefinedEntities = {},\n      processedIds = {},\n      entities = chart.config.entities,\n      useSNameAsId = conf.useSNameAsId,\n      i,\n      defObj,\n      oldId,\n      newId,\n      sName,\n      lName,\n      id,\n      newObj,\n      entityCount = 0,\n      entityStore,\n      entityDataStore,\n      item,\n      entityObj;\n    i = entityDef.length;\n\n    while (i--) {\n      defObj = entityDef[i];\n      oldId = defObj.internalid;\n      newId = (defObj.newid ? defObj.newid : oldId);\n      sName = defObj.sname;\n      lName = defObj.lname;\n      entityObj = entities[oldId];\n\n      /**\n                   * Handling the exception when the entity ids in the map js have an\n                   * extra space (leading or trailing)\n                   */\n      oldId = trimString(oldId);\n      newId = trimString(newId);\n      newId = newId && newId.toLowerCase();\n      if (entityObj) {\n        redefinedEntities[newId] = newObj = { origId: oldId };\n\n        // processedIds is needed to keep track of all the entities\n        // that have been redefined using the entitiydef block.\n        processedIds[oldId] = true;\n\n        // not using extend2 as it involves a deep copy of the objects.\n        for (item in entityObj) {\n          newObj[item] = entityObj[item];\n        }\n\n        newObj.shortLabel = sName || entityObj.shortLabel;\n        newObj.label = lName || entityObj.label;\n        newObj.showhovereffect = defObj.showhovereffect;\n        newObj.fillhovercolor = defObj.fillhovercolor;\n        newObj.fillhoveralpha = defObj.fillhoveralpha;\n        newObj.fillhoverangle = defObj.fillhoverangle;\n        newObj.fillhoverratio = defObj.fillhoverratio;\n        newObj.borderhoverthickness = defObj.borderhoverthickness;\n      }\n    }\n    entityDataStore = dataset.components.data;\n    if (!entityDataStore) {\n      entityDataStore = dataset.components.data = {\n\n      };\n    }\n    for (id in redefinedEntities) {\n      id = id.toLowerCase();\n      if (!entityDataStore[id]) {\n        entityDataStore[id] = {\n          config: {}\n        };\n      }\n      entityDataStore[id].config = redefinedEntities[id];\n      entityCount += 1;\n    }\n    entityStore = entityDataStore;\n    for (id in entities) {\n      newObj = entities[id];\n      /**\n                   * Handling the exception when the entity ids in the map js have an\n                   * extra space (leading or trailing)\n                   */\n      id = trimString(id);\n\n      if (!processedIds[id]) {\n        if (useSNameAsId) {\n          entityObj = entityStore[newObj.shortLabel.toLowerCase()];\n          if (!entityObj) {\n            entityObj = entityStore[newObj.shortLabel.toLowerCase()] = {};\n          }\n          entityObj.config = {};\n          entityObj.origId = newObj.shortLabel;\n        } else {\n          entityObj = entityStore[id.toLowerCase()];\n          if (!entityObj) {\n            entityObj = entityStore[id.toLowerCase()] = {};\n          }\n          entityObj.config = {};\n          entityObj.config.origId = id;\n        }\n\n        for (item in newObj) {\n          entityObj.config[item] = newObj[item];\n        }\n\n        entityCount += 1;\n      }\n    }\n    // Entity count introduced to enable the batch rendering of entities.\n    conf.entityCount = entityCount;\n  }\n\n  /**\n   * Draws entities\n   */\n  draw () {\n    let dataset = this,\n      conf = dataset.config,\n      chart = dataset.getFromEnv('chart'),\n      // The rendering should be done in samll batches only for VML.\n      // For SVG increase the batch size\n      // @todo Determine the batchsize in a generalized way for all browsers instead of hardcoding it.\n      BATCH_SIZE = hasSVG ? 200 : 10,\n      doBatchRendering;\n    dataset.createContainer();\n    this.config.ready = false;\n    conf.BATCH_SIZE = BATCH_SIZE;\n    conf.labelBatchSize = hasSVG ? 200 : 20;\n    doBatchRendering = this._batchRender();\n    doBatchRendering(0);\n    chart.config.entityFlag = true;\n    chart.checkComplete();\n  }\n\n  /**\n   * Renders large entities in a small chunk\n   * @return {Function} draw entities batch wise\n   */\n  _batchRender () {\n    let dataset = this,\n      conf = dataset.config,\n      chart = dataset.getFromEnv('chart'),\n      // jobList = chart.getJobList(),\n      firstEntity = chart.config.entities.firstEntity,\n      // components = dataset.components,\n      entities = dataset.components.data,\n      batchSize = conf.BATCH_SIZE,\n      keys = conf.entityKeys = firstEntity ? dataset._getKeys(firstEntity, entities) : Object.keys(entities),\n      keysLength = conf.entityLength = keys.length,\n      i,\n      entityObj,\n      count,\n      ent,\n      outlinesDrawn,\n      drawEntities = function (entityStartIndex) {\n        i = entityStartIndex;\n        count = 0;\n        // To counter the performance issues while rendering in IE, the entities shall\n        // be rendered in bat +ches of BATCH_SIZE.\n        while (keys[i] !== UNDEF) {\n          entityObj = entities[keys[i]];\n          outlinesDrawn = dataset.drawEntity(entityObj, batchSize);\n          count += outlinesDrawn;\n          if (entityObj.config.drawn) {\n            ent = i === keysLength - 1 ? entityObj : entities[keys[i - 1]];\n            if (ent) {\n              ent.config.drawn = false;\n              ent.config.outlineStartIndex = UNDEF;\n            }\n            i++;\n          }\n          if (count >= batchSize) {\n            dataset.addJob('entityDraw', drawEntities.bind(dataset, i), priorityList.entitydraw);\n            break;\n          }\n        }\n\n        if (i === keysLength) {\n          dataset._addEventListenersToEntities(0);\n          dataset.initComplete();\n        }\n      };\n\n    return drawEntities;\n  }\n\n  /**\n   * Add event listeners to entities\n   * @param {number} startIndex index of entity array\n   */\n  _addEventListenersToEntities (startIndex) {\n    let dataset = this,\n      entities = dataset.components.data,\n      // chart = dataset.getFromEnv('chart'),\n      // jobList = chart.getJobList(),\n      conf = dataset.config,\n      batchSize = conf.BATCH_SIZE,\n      keys = conf.entityKeys,\n      i,\n      len = conf.entityLength,\n      entity,\n      count = 0,\n      options,\n      entityConf;\n\n    for (i = startIndex; i < len; i++) {\n      entity = entities[keys[i]];\n      entityConf = entity.config;\n      options = entityConf.options;\n      if (!(options && options.isDataEnabled === false)) {\n        dataset.addMouseGestures(entity);\n      }\n      count++;\n      if (count === batchSize) {\n        dataset.addJob('_addEventListenersToEntities', dataset._addEventListenersToEntities.bind(this, i), priorityList.entitydraw);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Fetch keys of entity object\n   * @param {Object} firstEntity reference of starting entity object\n   * @param {Array} entities array of entities\n   * @return {Object} key of entity object\n   */\n  static _getKeys (firstEntity, entities) {\n    let keys = [firstEntity],\n      item = firstEntity;\n\n    while (entities[item]) {\n      item = entities[item].nextId;\n      keys.push(item);\n    }\n    return keys;\n  }\n\n  /**\n   * Fetch default tooltip of entity\n   * @param {Object} entity item\n   * @param {Object} entityJSON raw entity JSON object\n   * @return {string} tooltip string\n   */\n  _getDefaultTooltip (entity, entityJSON) {\n    let dataset = this,\n      value = entity.config.cleanValue,\n      formattedValue = entity.config.formattedValue,\n      entityOpts = dataset.getFromEnv('chart').config.entityOpts,\n      tooltip,\n      labelObj;\n\n    if (typeof entity.config.options === 'object') {\n      labelObj = entityJSON.labels && entityJSON.labels[0];\n      if (!labelObj) {\n        return UNDEF;\n      }\n      tooltip = ((entityOpts.useSNameInTooltip\n        ? labelObj.shortText : labelObj.text) +\n                      (value === null ? BLANK : (entityOpts.tooltipSepChar +\n                      formattedValue)));\n    } else {\n      tooltip = ((entityOpts.useSNameInTooltip\n        ? entityJSON.shortLabel : entityJSON.label) +\n                      (value === null ? BLANK : (entityOpts.tooltipSepChar +\n                      formattedValue)));\n    }\n\n    return tooltip;\n  }\n\n  /**\n   * Draws individual entity\n   * @param {Object} entity individual entity object\n   * @param {number} outlinesDrawCount number of outlines to be drawn\n   * @return {number} count of entities drawn\n   */\n  drawEntity (entity, outlinesDrawCount) {\n    let dataset = this,\n      chart = dataset.getFromEnv('chart'),\n      animationManager = chart.getFromEnv('animationManager'),\n      // components = chart.components,\n      // paper = dataset.getFromEnv('paper'),\n      entityConf = entity.config,\n      pathStr = (hasSVG || !isIE) ? 'litepath' : 'path',\n      entityOpts = chart.config.entityOpts,\n      outlines = entityConf.outlines,\n      toolTipController = dataset.getFromEnv('toolTipController'),\n      addTo = this.getLinkedParent().getChildContainer('plot'),\n      shadowGroup = this.getLinkedParent().getChildContainer('plotShadow'),\n      toolText = entityConf.toolText,\n      showShadow = entityOpts.shadow,\n      i,\n      outlinePath = [],\n      path,\n      visibleEntityAttr,\n      // fillOpacity,\n      applyAttr,\n      outlineGraphics,\n      outline,\n      count,\n      customStrokeWidthModifier,\n      finalAttr = {},\n      shadowOptions;\n\n    dataset._configureEntityDrawingParams(entity);\n    entityConf = entity.config;\n    visibleEntityAttr = entityConf.visibleEntityAttr;\n    shadowOptions = entityConf.shadowOptions;\n    // fillOpacity = entityConf.fillOpacity;\n\n    i = entityConf.outlineStartIndex === UNDEF ? outlines.length : entityConf.outlineStartIndex;\n    if (!entity.graphics) {\n      entity.graphics = {};\n    }\n    count = 0;\n    outlinePath = entityConf.outlinePath || (entityConf.outlinePath = []);\n    customStrokeWidthModifier = entityConf.customStrokeWidthModifier;\n    if (typeof entityConf.options === 'object') {\n      while (i--) {\n        outlinePath = outlines[i].outline;\n        if (entityConf.options.isDataEnabled === true) {\n          applyAttr = visibleEntityAttr;\n        } else {\n          applyAttr = extend2(extend2({}, visibleEntityAttr),\n            pruneStrokeAttrs(outlines[i].style, customStrokeWidthModifier));\n        }\n\n        outlineGraphics = entity.graphics.outlines;\n        if (!outlineGraphics) {\n          outlineGraphics = entity.graphics.outlines = [];\n        }\n\n        !outlineGraphics[i] && (outlineGraphics[i] = {});\n        outline = outlineGraphics[i].outline;\n        // if (!outline) {\n        //   outline = outlineGraphics[i].outline = paper[pathStr](outlinePath, addTo);\n        // }\n\n        applyAttr[pathStr] = outlinePath;\n        outline = outlineGraphics[i].outline = animationManager.setAnimation({\n          el: pathStr,\n          container: addTo,\n          attr: applyAttr,\n          component: dataset,\n          label: 'path'\n        });\n\n        outline\n          .shadow(showShadow ? shadowOptions : false, shadowGroup);\n        toolTipController.enableToolTip(outline, toolText);\n        count++;\n        entityConf.outlineStartIndex = i;\n        if (count === outlinesDrawCount) {\n          return count;\n        }\n      }\n\n      entityConf.drawn = true;\n      return count;\n    }\n    while (i--) {\n      path = outlines[i];\n      outlinePath = path.concat(outlinePath);\n      count++;\n      entityConf.outlineStartIndex = i;\n      if (count === outlinesDrawCount) {\n        entityConf.outlinePath = outlinePath;\n        return count;\n      }\n    }\n\n    !entity.graphics.outlines && (visibleEntityAttr[pathStr] = outlinePath);\n    Object.assign(finalAttr, visibleEntityAttr, (entity.hidden && { 'fill-opacity': 0 }) || {});\n    entity.graphics.outlines = animationManager.setAnimation({\n      el: entity.graphics.outlines || pathStr,\n      container: addTo,\n      attr: finalAttr,\n      component: dataset,\n      label: 'path'\n    });\n\n    // entity.graphics.outlines = paper[pathStr](outlinePath, addTo)\n    //   .attr(visibleEntityAttr);\n\n    // entity.graphics.outlines.attr({\n    //   'fill-opacity': 0,\n    //   'stroke-opacity': 0\n    // });\n    entityConf.drawn = true;\n    entityConf.outlineStartIndex = 0;\n    entityConf.outlinePath = [];\n    entity.graphics.outlines.shadow(showShadow ? shadowOptions : false, shadowGroup);\n    toolTipController.enableToolTip(entity.graphics.outlines, toolText);\n    return count;\n  }\n\n  /**\n   * Configure graphics attributes of entities\n   * @param {Object} entity individual entity object\n   */\n  _configureEntityDrawingParams (entity) {\n    let dataset = this,\n      chart = dataset.getFromEnv('chart'),\n      entityConf = entity.config,\n      entityOpts = chart.config.entityOpts,\n      scalingParams = chart.config.scalingParams,\n      scaleStrokes = (!isIE || hasSVG),\n      scaleFactor = scalingParams.scaleFactor,\n      scaledPixel = scalingParams.strokeWidth,\n      scaledPixelWithBaseFactor = (scaleStrokes\n        ? chart.baseScaleFactor : 1) * scaledPixel,\n      scaleBorder = entityOpts.scaleBorder === 1,\n      borderThickness = entityConf.borderThickness,\n      alphaArr = entityConf.alphaArr,\n      connectorThickness = entityConf.origConnectorThickness,\n      hoverBorderThickness = entityConf.hoverBorderThickness,\n      visibleEntityAttr = entityConf.visibleEntityAttr,\n      fillOpacity = visibleEntityAttr['fill-opacity'],\n      customStrokeWidthModifier;\n\n    entityConf.shadowOptions = {\n      scalefactor: [scaleFactor, scaleFactor * chart.config.baseScaleFactor],\n      opacity: mathMax.apply(math, alphaArr) / 100,\n      useFilter: 0\n    };\n\n    entityConf.fillOpacity = entity.hidden ? 0 : fillOpacity;\n\n    // By default scaleBorder is false.\n    if (scaleStrokes) {\n      // SVG\n      borderThickness = entityConf.entityBorderThickness = scaleBorder ? (borderThickness * scaledPixelWithBaseFactor) : (borderThickness / scaleFactor);\n      connectorThickness = connectorThickness / scaleFactor;\n      customStrokeWidthModifier = scaleBorder ? scaleFactor : scalingParams.sFactor;\n      if (hoverBorderThickness) {\n        hoverBorderThickness = entityConf.hoverBorderThickness = scaleBorder\n          ? (hoverBorderThickness * scaledPixelWithBaseFactor)\n          : (hoverBorderThickness / scaleFactor);\n      }\n\n      // if (isWebKit) {\n      // webkit issue fix\n      //     borderThickness = (borderThickness && mathCeil(borderThickness)) || 0;\n      //     connectorThickness = (connectorThickness && mathCeil(connectorThickness)) || 0;\n      // }\n    } else {\n      // VML\n      borderThickness = scaleBorder ? borderThickness * scaledPixel : borderThickness;\n      customStrokeWidthModifier = scaleBorder ? scalingParams.scaleFactor : chart.baseScaleFactor;\n    }\n    entityConf.entityBorderThickness = borderThickness;\n    entityConf.connectorThickness = connectorThickness;\n    entityConf.customStrokeWidthModifier = customStrokeWidthModifier;\n    visibleEntityAttr['stroke-width'] = borderThickness;\n    visibleEntityAttr.transform = hasSVG || !isIE ? '' : scalingParams.transformStr;\n  }\n\n  /**\n   * Draw entity labels\n   * @param {Object} ent entity item\n   * @param {Object} dataset Entity dataset component\n   */\n  drawLabels (ent) {\n    let dataset = this,\n      itemMap = ent,\n      chart = dataset.getFromEnv('chart'),\n      conf = dataset.config,\n      batchSize = conf.labelBatchSize,\n      keysLength = conf.entityLength,\n      labelItems = [],\n      i,\n      j,\n      annGroupElem = chart.getChildContainer('upperAnnotationGroup'),\n      groupItems,\n      annObj,\n      annCount = 0,\n      mapLabelAnnotations = dataset.getChildren('mapLabelAnnotations') && dataset.getChildren('mapLabelAnnotations')[annCount],\n      count = 0,\n      labelItemsAdded = 0,\n      annConfig = chart.config.annotationConfig;\n\n    if (!mapLabelAnnotations) {\n      annObj = new Annotation();\n      dataset.attachChild(annObj, 'mapLabelAnnotations');\n      mapLabelAnnotations = dataset.getChildren('mapLabelAnnotations')[annCount];\n      mapLabelAnnotations.addCustomGroup(annGroupElem);\n    }\n    mapLabelAnnotations.destroy();\n    mapLabelAnnotations._renderer && (mapLabelAnnotations._renderer = null);\n    // Entity objects should be shown above plots by default\n    annConfig.showbelow = 0;\n\n    for (i in itemMap) {\n      dataset.drawLabel(itemMap[i], labelItems);\n      count++;\n      if (count === batchSize) {\n        // Set the label of entity labels\n        for (j = 0; j < labelItems.length; j++) {\n          labelItems[j].animationLabel = ENTITYLABEL;\n        }\n        groupItems = mapLabelAnnotations.addGroup(Object.assign(annConfig, {\n          id: 'entityLabels' + annCount,\n          items: labelItems,\n          animationLabel: 'entityLabelGroup'\n        }), dataset);\n        // chart.config.labelsOnTop && mapLabelAnnotations.getContainer('entityLabels' + annCount).toFront();\n        for (j = 0; j < groupItems.items.length; j++) {\n          groupItems.items[j].addEventListener('fc-mouseover', labelItems[j].onmouseover);\n          groupItems.items[j].addEventListener('fc-mouseout', labelItems[j].onmouseout);\n          groupItems.items[j].addEventListener('fc-click', labelItems[j].onclick);\n        }\n        annCount++;\n        mapLabelAnnotations = dataset.getChildren('mapLabelAnnotations') &&\n          dataset.getChildren('mapLabelAnnotations')[annCount];\n        if (!mapLabelAnnotations) {\n          annObj = new Annotation();\n          dataset.attachChild(annObj, 'mapLabelAnnotations');\n          mapLabelAnnotations = dataset.getChildren('mapLabelAnnotations')[annCount];\n          mapLabelAnnotations.addCustomGroup(annGroupElem);\n        }\n        mapLabelAnnotations.destroy();\n        mapLabelAnnotations._renderer && (mapLabelAnnotations._renderer = null);\n        count = 0;\n        labelItems = [];\n      } else if (labelItemsAdded === keysLength - 1) {\n        // Set the labels of entity labels\n        for (j = 0; j < labelItems.length; j++) {\n          labelItems[j].animationLabel = ENTITYLABEL;\n        }\n        groupItems = mapLabelAnnotations.addGroup(Object.assign(annConfig, {\n          id: 'entityLabels' + annCount,\n          items: labelItems,\n          animationLabel: 'entityLabelGroup'\n        }), dataset);\n        // chart.config.labelsOnTop && mapLabelAnnotations.getContainer('entityLabels' + annCount).toFront();\n        for (j = 0; j < groupItems.items.length; j++) {\n          groupItems.items[j].addEventListener('fc-mouseover', labelItems[j].onmouseover);\n          groupItems.items[j].addEventListener('fc-mouseout', labelItems[j].onmouseout);\n          groupItems.items[j].addEventListener('fc-click', labelItems[j].onclick);\n        }\n      }\n      labelItemsAdded++;\n    }\n    dataset.drawLabelConnFn(0);\n  }\n\n  /**\n   * Draw label connectors\n   * @param {number} startIndex starting index of entity\n   */\n  drawLabelConnFn (startIndex) {\n    let dataset = this,\n      conf = dataset.config,\n      // chart = dataset.getFromEnv('chart'),\n      // jobList = chart.getJobList(),\n      entities = dataset.components.data,\n      batchSize = conf.BATCH_SIZE,\n      keys = conf.entityKeys,\n      l,\n      i,\n      length = keys.length,\n      labelArr,\n      config,\n      entity,\n      count = 0;\n\n    for (i = startIndex; i < length; i++) {\n      entity = entities[keys[i]];\n      config = entity.config;\n      if (typeof config.options === 'object') {\n        labelArr = config.labels;\n        l = (labelArr && labelArr.length) || 0;\n        while (l--) {\n          if (labelArr[l].labelConnectors) {\n            dataset.drawLabelConnectors(entity, labelArr[l].labelConnectors, dataset);\n            count++;\n          }\n        }\n      } else {\n        if (config.labelConnectors) {\n          dataset.drawLabelConnectors(entity, config.labelConnectors, dataset);\n          count++;\n        }\n      }\n      if (count === batchSize) {\n        dataset.addJob('drawLabelConnectors', dataset.drawLabelConnFn.bind(this, i), priorityList.entitydraw);\n        break;\n      }\n    }\n  }\n\n  /**\n   * Return the label object to feed annotation\n   * @param {Object} entity item\n   * @param {number} index index of entities\n   * @param {boolean} userValue determines whether to parse user value\n   * @return {Object} individual label object\n   */\n  _getLabelObject (entity, index, userValue) {\n    let dataset = this,\n      chart = dataset.getFromEnv('chart'),\n      chartAttrs = dataset.getFromEnv('chart-attrib'),\n      entityConf = entity.config,\n      labelConfig,\n      scalingParams = chart.config.scalingParams,\n      labelPos,\n      labelAlignment,\n      firstEle = entity.graphics && entity.graphics.outlines,\n      fontStyleObj,\n      fontSize = entityConf.fontSize,\n      labelPadding = entityConf.labelPadding,\n      labelsArr = entityConf.labels || [],\n      entityLabels = entityConf.entityLabels || [],\n      baseWidth,\n      baseHeight,\n      labelX,\n      labelY,\n      box,\n      align,\n      valign,\n      fsize,\n      xOffset,\n      yOffset,\n      oriLabelObj,\n      labelObj;\n\n    if (index !== UNDEF) {\n      oriLabelObj = labelsArr[index];\n      labelObj = entityLabels[index];\n      labelConfig = labelObj.config;\n      fontStyleObj = labelConfig.style = oriLabelObj.style;\n\n      labelPos = oriLabelObj.labelPosition;\n      labelAlignment = oriLabelObj.labelAlignment;\n    } else {\n      labelConfig = entity.labelConfig;\n\n      labelPos = entityConf.labelPosition;\n      labelAlignment = entityConf.labelAlignment;\n    }\n\n    if (labelPos) {\n      labelX = labelPos[0];\n      labelY = labelPos[1];\n    } else {\n      box = firstEle.getBBox();\n      labelX = box.x + (box.width / 2);\n      labelY = box.y + (box.height / 2);\n    }\n\n    if (labelAlignment) {\n      // labelPadding neednt be scaleFactored.\n      align = labelAlignment[0];\n      valign = labelAlignment[1];\n\n      if (align === POSITION_RIGHT) {\n        labelX -= labelPadding;\n      } else if (align === POSITION_LEFT) {\n        labelX += labelPadding;\n      }\n\n      if (valign === POSITION_TOP) {\n        labelY -= labelPadding;\n      } else if (valign === POSITION_BOTTOM) {\n        labelY += labelPadding;\n      }\n    } else {\n      align = POSITION_CENTER;\n      valign = POSITION_MIDDLE;\n    }\n\n    fsize = parseFloat(fontSize) / (scalingParams.sFactor);\n    if (!userValue && fontStyleObj) {\n      /** @todo change fill property to color as for fonts fill is non-standard */\n      fontStyleObj.color && (labelConfig.fontColor = fontStyleObj.color);\n      fontStyleObj['font-size'] && (fsize =\n                      (parseFloat(fontStyleObj['font-size']) / (scalingParams.sFactor)));\n      fontStyleObj['font-family'] && (labelConfig.fontFamily = fontStyleObj['font-family']);\n      (fontStyleObj['font-weight'] !== UNDEF) && (labelConfig.fontBold =\n                      (fontStyleObj['font-weight'] === 'bold'));\n    }\n    labelConfig.x = labelX.toString();\n    labelConfig.y = labelY.toString();\n    labelConfig.wrap = 1;\n    labelConfig.type = TEXT_STR;\n    labelConfig.fontSize = fsize;\n    return {\n      x: labelX.toString(),\n      y: labelY.toString(),\n      wrapwidth: getTextWrapWidth[align](baseWidth, labelX + xOffset) - labelPadding,\n      wrapheight: getTextWrapHeight[valign](baseHeight, labelY + yOffset) - labelPadding,\n      wrap: 1,\n      type: 'text',\n      align: labelConfig.align,\n      valign: labelConfig.vAlign,\n      text: labelConfig.displayValue,\n      tooltext: labelConfig.toolText,\n      outlineText: pluckNumber(chartAttrs.textoutline, 0),\n      // link: labelConfig.link,\n      css: labelConfig.link !== UNDEF && {\n        cursor: 'pointer',\n        '_cursor': 'hand'\n      },\n      bgcolor: labelConfig.bgColor,\n      bordercolor: labelConfig.borderColor,\n      fillcolor: labelConfig.fontColor,\n      fontsize: labelConfig.fontSize,\n      font: labelConfig.fontFamily,\n      bold: labelConfig.fontBold,\n      onclick: function (e) {\n        let hoverEnt = entity.graphics.outlines,\n          i,\n          len;\n\n        // In some maps outline graphics is an array of elements for example - usmsa map\n        if (hoverEnt instanceof Array) {\n          for (i = 0, len = hoverEnt.length; i < len; i++) {\n            dataset.entityClick(hoverEnt[i].outline, e);\n          }\n        } else {\n          dataset.entityClick(hoverEnt, e);\n        }\n      },\n\n      onmouseover: function (e) {\n        let hoverEnt = entity.graphics.outlines,\n          i,\n          len;\n\n        // In some maps outline graphics is an array of elements for example - usmsa map\n        if (hoverEnt instanceof Array) {\n          for (i = 0, len = hoverEnt.length; i < len; i++) {\n            dataset.entityRollOver(hoverEnt[i].outline, e);\n          }\n        } else {\n          dataset.entityRollOver(hoverEnt, e);\n        }\n      },\n\n      onmouseout: function (e) {\n        let hoverEnt = entity.graphics.outlines,\n          i,\n          len;\n\n        // In some maps outline graphics is an array of elements for example - usmsa map\n        if (hoverEnt instanceof Array) {\n          for (i = 0, len = hoverEnt.length; i < len; i++) {\n            dataset.entityRollOut(hoverEnt[i].outline, e);\n          }\n        } else {\n          dataset.entityRollOut(hoverEnt, e);\n        }\n      },\n      ontouchstart: function (e) {\n        let hoverEnt = entity.graphics.outlines,\n          i,\n          len;\n\n        // In some maps outline graphics is an array of elements for example - usmsa map\n        if (hoverEnt instanceof Array) {\n          for (i = 0, len = hoverEnt.length; i < len; i++) {\n            dataset.entityRollOver(hoverEnt[i].outline, e);\n          }\n        } else {\n          dataset.entityRollOver(hoverEnt, e);\n        }\n        dataset.entityRollOver(hoverEnt, e);\n      }\n    };\n  }\n\n  /**\n   * Draw labels using annotaion\n   * @param {Object} entity entity item\n   * @param {Array} annotationsArray annotation array for labels\n   */\n  drawLabel (entity, annotationsArray) {\n    let dataset = this,\n      config = entity.config,\n      showLabel = config.showLabel,\n      useValue,\n      i,\n      labelArr;\n\n    if (!showLabel) {\n      return;\n    }\n\n    if (typeof config.options === 'object') {\n      labelArr = config.labels;\n      i = (labelArr && labelArr.length) || 0;\n\n      useValue = config.options.isDataEnabled;\n      while (i--) {\n        annotationsArray.push(dataset._getLabelObject(entity, i, useValue, !i));\n      }\n    } else {\n      annotationsArray.push(dataset._getLabelObject(entity, UNDEF, true, true));\n    }\n  }\n\n  /**\n   * Draw label connectors\n   * @param {Object} entity entity item\n   * @param {Array} connectorArr datalabel connector array\n   * @param {Object} dataSet entity dataset object\n   */\n  drawLabelConnectors (entity, connectorArr, dataSet) {\n    let entityConf = entity.config,\n      dataset = this,\n      chart = dataset.getFromEnv('chart'),\n      animationManager = chart.getFromEnv('animationManager'),\n      // paper = dataset.getFromEnv('paper'),\n      scalingParams = chart.config.scalingParams,\n      datasetGroup = dataSet.getLinkedParent().getChildContainer('plot'),\n      i = (connectorArr && connectorArr.length) || 0,\n      connElem,\n      path,\n      showLabel = entityConf.showLabel;\n\n    while (i--) {\n      path = connectorArr[i];\n      connElem = entity.graphics.connectorElem;\n      if (showLabel) {\n        entity.graphics.connectorElem = connElem = animationManager.setAnimation({\n          el: entity.graphics.connectorElem || 'path',\n          attr: {\n            path: path,\n            opacity: 1,\n            transform: (hasSVG || !isIE) ? '' : scalingParams.transformStr,\n            stroke: convertColor(entityConf.connectorColor, entityConf.connectorAlpha),\n            'shape-rendering': CRISP,\n            'stroke-width': entityConf.connectorThickness\n          },\n          container: datasetGroup,\n          component: dataset,\n          label: 'labelConnectors'\n        });\n      } else {\n        connElem && connElem.hide();\n      }\n    }\n  }\n\n  /**\n   * Handler function for entity click\n   * @param {Object} entityElem entity graphic\n   * @param {Event} e click event\n   */\n  entityClick (entityElem, e) {\n    let entity = entityElem.node.__entity,\n      dataset = this,\n      chart = dataset.getFromEnv('chart'),\n      scalingParams = chart.config.scalingParams,\n      entityBox = entityElem.getBBox(),\n      linkClickFN = chart.getFromEnv('linkClickFN'),\n      config = entity.config,\n      link = config.link;\n\n    entityBox.width = entityBox.width * scalingParams.scaleFactor;\n    entityBox.height = entityBox.height * scalingParams.scaleFactor;\n    entityBox.x = (entityBox.x * scalingParams.scaleFactor) + scalingParams.translateX;\n    entityBox.y = (entityBox.y * scalingParams.scaleFactor) + scalingParams.translateY;\n    entityBox.x2 = entityBox.x + entityBox.width;\n    entityBox.y2 = entityBox.y + entityBox.height;\n\n    chart.fireChartInstanceEvent('entityclick', config.eventArgs, e);\n\n    if (link !== UNDEF) {\n      linkClickFN.call({\n        link: link,\n        entity: entity,\n        entityBox: entityBox\n      }, true);\n    }\n  }\n\n  /**\n   * Handler function for entity mouse roll over\n   * @param {Object} entityElem entity graphic\n   * @param {Event} e mouse roll over event\n   */\n  entityRollOver (entityElem, e) {\n    let entity = entityElem.node.__entity,\n      dataset = this,\n      config = entity.config,\n      chart = dataset.getFromEnv('chart'),\n      animationManager = chart.getFromEnv('animationManager'),\n      hoverAttr = config.hoverAttr;\n\n    chart.plotEventHandler(entityElem, e, 'entityRollOver');\n    if (entityElem.data('hovered')) {\n      clearTimeout(entity.config.timer);\n    } else {\n      if (config.useHoverColor && config.isVisible && !entity.hidden && hoverAttr) {\n        chart.config.hoverEntity = entityElem;\n        // Highlight hovered entity with fade animation\n        animationManager.setAnimation({\n          el: entityElem,\n          attr: hoverAttr,\n          component: dataset,\n          state: 'updating',\n          label: 'path'\n        });\n        entityElem.data('hovered', true);\n      }\n    }\n  }\n\n  /**\n   * Handler function for entity mouse roll out\n   * @param {Object} entityElem entity graphic\n   * @param {Event} e mouse roll out event\n   */\n  entityRollOut (entityElem, e) {\n    let entity = entityElem.node.__entity,\n      dataset = this,\n      hidden,\n      chart = dataset.getFromEnv('chart'),\n      animationManager = chart.getFromEnv('animationManager'),\n      config = entity.config,\n      revertAttr = config.revertAttr;\n    chart.plotEventHandler(entityElem, e, 'entityRollOut');\n    // global.raiseEvent('entityRollOut', eventArgs, chart.chartInstance);\n    entity.config.timer = setTimeout(function () {\n      hidden = entity.hidden;\n      if ((hidden !== true) && revertAttr) {\n        // Remove highlight from entitiy\n        animationManager.setAnimation({\n          el: entityElem,\n          attr: revertAttr,\n          component: dataset,\n          state: 'updating',\n          label: 'path'\n        });\n        entityElem.data('hovered', false);\n      }\n    }, 100);\n  }\n\n  /**\n   * Function to capture mouse activities\n   * @param {Object} entity entity item\n   * @memberof Entities\n   */\n  addMouseGestures (entity) {\n    let config = entity.config,\n      originalId = config.originalId,\n      dataset = this,\n      graphics = entity.graphics,\n      useHoverColor = config.useHoverColor,\n      hoverBorderThickness = config.hoverBorderThickness,\n      hoverBorderColor = config.hoverBorderColor,\n      hoverBorderAlpha = config.hoverBorderAlpha,\n      borderThickness = config.entityBorderThickness,\n      borderColor = config.borderColor,\n      borderAlpha = config.borderAlpha,\n      link = config.link,\n      visibleEntityAttr = config.visibleEntityAttr,\n      groupId = 'groupId' + originalId,\n      item,\n      i,\n      graphic,\n      len,\n      outlines,\n      bindListener = function (graphicEle) {\n        if (link !== UNDEF) {\n          graphicEle\n            .css({\n              cursor: 'pointer',\n              '_cursor': 'hand'\n            });\n        }\n\n        graphicEle.data('eventArgs', config.eventArgs);\n        graphicEle.data('groupId', groupId);\n        graphicEle.node.__entity = entity;\n\n        // If listeners are not binded\n        if (!entity._listenersBinded) {\n          graphicEle.on('fc-click', dataset.entityClick.bind(dataset, graphicEle))\n            .hover(dataset.entityRollOver.bind(dataset, graphicEle), dataset.entityRollOut.bind(dataset, graphicEle));\n        }\n      };\n\n    config.eventArgs = {\n      value: config.cleanValue,\n      label: config.label,\n      shortLabel: config.shortLabel,\n      originalId: config.origId,\n      id: config.id || config.origId\n    };\n\n    config.legacyEventArgs = {\n      value: config.value,\n      lName: config.label,\n      sName: config.shortLabel,\n      id: config.originalId || config.id\n    };\n\n    if (useHoverColor) {\n      config.hoverAttr = {\n        fill: toRaphaelColor(config.hoverColor)\n      };\n      config.revertAttr = {\n        fill: toRaphaelColor(config.fillColor),\n        stroke: toRaphaelColor(config.borderColor, config.borderAlpha)\n      };\n\n      config.revertAttr['fill-opacity'] = visibleEntityAttr['fill-opacity'];\n      if (hoverBorderThickness !== borderThickness) {\n        config.hoverAttr['stroke-width'] = pluckNumber(hoverBorderThickness, borderThickness);\n        config.revertAttr['stroke-width'] = borderThickness;\n      }\n\n      /* @todo: Enable once the drawing of entities allows these\n                   * hover effects to be applied properly.\n                   */\n      if (hoverBorderColor !== borderColor || hoverBorderAlpha !== borderAlpha) {\n        config.hoverAttr.stroke = convertColor(hoverBorderColor, hoverBorderAlpha);\n        config.revertAttr.stroke = convertColor(borderColor, borderAlpha);\n      }\n    }\n\n    for (item in graphics) {\n      if (graphics.hasOwnProperty(item)) {\n        if (graphics[item] instanceof Array) {\n          outlines = graphics[item];\n          for (i = 0, len = outlines.length; i < len; i++) {\n            graphic = outlines[i].outline;\n            bindListener(graphic);\n          }\n          entity._listenersBinded = true;\n        } else {\n          graphic = graphics[item];\n          bindListener(graphic);\n          entity._listenersBinded = true;\n        }\n      }\n    }\n  }\n\n  /**\n   * Function which returns the upper and lower data limits.\n   * @return {Object} containing the upper and lower data bounds\n   * @memberof Entities\n   */\n  getDataLimits () {\n    let dataset = this,\n      conf = dataset.config;\n    return {\n      max: conf.max,\n      min: conf.min\n    };\n  }\n\n  createContainer () {\n    let dataset = this,\n      parent = dataset.getLinkedParent(),\n      animationManager = dataset.getFromEnv('animationManager'),\n      pContainer = parent.getChildContainer('layer0');\n\n    !dataset.getChildContainer('abovePlotGroup') && dataset.addChildContainer('abovePlotGroup',\n      animationManager.setAnimation({\n        el: 'group',\n        attr: {\n          name: 'abovePlotGroup',\n          opacity: 1\n        },\n        container: pContainer,\n        component: dataset,\n        label: 'group'\n      }));\n\n    !dataset.getChildContainer('belowPlotGroup') && dataset.addChildContainer('belowPlotGroup',\n      animationManager.setAnimation({\n        el: 'group',\n        attr: {\n          name: 'belowPlotGroup',\n          opacity: 1\n        },\n        container: pContainer,\n        component: dataset,\n        label: 'group'\n      }));\n  }\n\n  /**\n   * Function to check whether drawing of labels is complete\n   *\n   * @memberof Entities\n   */\n  initComplete () {\n    let dataset = this,\n      chart = dataset.getFromEnv('chart'),\n      entities = dataset.components.data;\n    this.drawLabels(entities);\n    chart.config.entitiesReady = true;\n    chart.checkComplete();\n  }\n}\n\nexport default Entities;\n","const PLOT_STR = 'plot',\n  FINAL_STR = 'final';\nvar fadeEffect = [{\n    initialAttr: function () {\n      return { opacity: 0 };\n    },\n    finalAttr: function () {\n      return { opacity: 1 };\n    }\n  }],\n  PATH_APPEARING_FN = () => {\n    fadeEffect[0].slot = PLOT_STR;\n    return fadeEffect;\n  },\n  PATH_UPDATING_FN = input => {\n    return [{\n      finalAttr: function () {\n        return input.finalAttr;\n      }\n    }];\n  },\n  LABEL_CONNECTOR_APPEARING_FN = () => {\n    fadeEffect[0].slot = FINAL_STR;\n    return fadeEffect;\n  },\n  ENTITY_LABEL_APPEARING_FN = () => {\n    return [\n      {\n        initialAttr: {\n          opacity: 0\n        },\n        finalAttr: {\n          opacity: 1\n        },\n        slot: 'final'\n      }\n    ];\n  },\n  MARKER_ITEM_APPEARING_FN = () => {\n    fadeEffect[0].slot = FINAL_STR;\n    return fadeEffect;\n  },\n  MARKER_ITEM_UPDATING_FN = input => {\n    return [{\n      finalAttr: function () {\n        return input.finalAttr;\n      }\n    }];\n  },\n  GROUP_APPEARING_FN = input => {\n    return [{\n      initialAttr: function () {\n        return Object.assign({ opacity: 0 }, input.attr);\n      },\n      finalAttr: function () {\n        return input.attr;\n      },\n      slot: 'plot'\n    }];\n  },\n  GROUP_UPDATING_FN = input => {\n    return [{\n      initialAttr: function () {\n        return Object.assign({ opacity: 0 }, input.attr);\n      },\n      finalAttr: function () {\n        return input.attr;\n      },\n      slot: 'plot'\n    }];\n  };\n\nexport default {\n  'initial.dataset.entities': function () {\n    return {\n      'path.appearing': PATH_APPEARING_FN,\n      'path.updating': PATH_UPDATING_FN,\n      'labelConnectors.appearing': LABEL_CONNECTOR_APPEARING_FN,\n      'labelConnectors.updating': null,\n      'entityLabel.appearing': ENTITY_LABEL_APPEARING_FN,\n      '*': null\n    };\n  },\n  'initial.dataset.markers': function () {\n    return {\n      markers: null,\n      'markerItem.appearing': MARKER_ITEM_APPEARING_FN,\n      'markerItem.updating': MARKER_ITEM_UPDATING_FN\n    };\n  },\n  'initial.group.mapGroup': function () {\n    return {\n      'group.appearing': GROUP_APPEARING_FN,\n      'group.updating': GROUP_UPDATING_FN,\n      '*': null\n    };\n  }\n};\n","/* eslint require-jsdoc: 'error', valid-jsdoc: [\"error\", { \"requireReturn\": false }] */\nimport Entities from '../entities';\nimport KdTree from '@fusioncharts/charts/src/dataset/_internal/kdtree';\nimport Annotation from '@fusioncharts/features/src/annotation/ext-annotation';\nimport { addDep } from '@fusioncharts/core/src/dependency-manager';\nimport mapsAnimation from '../_internal/map-entities.animation';\nimport { pluck, extend2, parseTooltext, pluckNumber, parseUnsafeString } from '@fusioncharts/core/src/lib';\nimport { raiseEventGroup } from '@fusioncharts/core/src/event-api';\nimport { priorityList } from '@fusioncharts/core/src/schedular';\n\nlet UNDEF,\n  BLANK = '',\n  POSITION_TOP = 'top',\n  POSITION_BOTTOM = 'bottom',\n  POSITION_RIGHT = 'right',\n  POSITION_LEFT = 'left',\n  POSITION_MIDDLE = 'middle',\n  POSITION_CENTER = 'center',\n  LINE_STR = 'line',\n  TEXT_STR = 'text',\n  POLYGON_STR = 'polygon',\n  ACR_STR = 'arc',\n  CIRCLE_STR = 'circle',\n  CENTER_STR = 'center',\n\n  INNERRADIUSFACTOR = 0.6,\n\n  math = window.Math,\n  mathMin = math.min,\n  mathMax = math.max,\n\n  //   isStrokeReg = /stroke/ig,\n  //   isWebKit = /AppleWebKit/.test(userAgent),\n  //   mathCeil = math.ceil,\n  MARKER_ITEM_KEY = 'items',\n\n  /**\n   * Hover in handler function for markers\n   * @param {Object} marker the marker which is hovered on\n   */\n  hoverFn = function (marker) {\n    let dataset = this, // eslint-disable-line no-invalid-this\n      chart = dataset.getFromEnv('chart'),\n      annotations = dataset.getChildren('mapAnnotations')[0],\n      shape = marker.markerShape,\n      groupConfig = shape.groupConfig,\n      options = shape.data('unfilteredConfig'),\n      eventArgs = options._markerEventArgs,\n      attrs,\n      markerConfig = marker.config;\n\n    // if link is present then cursor is of pointer type\n    // if (markerConfig.link) {\n    //   element.node.style.cursor = POINTER;\n    // }\n    if (options.hovereffect) {\n      if (shape.config.type === 'circle') {\n        // fillObj = {\n        // color: options.hoverfillcolor,\n        // alpha: options.hoverfillalpha,\n        // angle: 360 - options.hoverfillangle,\n        // ratio: options.hoverfillratio,\n        // gradientUnits: 'objectBoundingBox',\n        // radialGradient: shape.config.rawFillPattern === 'radial'\n        // };\n        // options._hoverattrs.fill = toRaphaelColor(fillObj);\n        // options._hoverattrs = extend2(obj, options._hoverattrs);\n        attrs = extend2({\n          fillcolor: options.hoverfillcolor,\n          fillalpha: options.hoverfillalpha,\n          fillangle: options.hoverfillangle,\n          fillratio: options.hoverfillratio,\n          gradientUnits: 'objectBoundingBox',\n          radialGradient: 1\n        }, options._hoverattrs);\n      }\n      attrs = extend2({}, options._hoverattrs);\n      annotations.update(shape.getId(), attrs);\n      // if (wrapper.type === 'image') {\n      //   delete attrs.fill;\n      //   delete attrs.stroke;\n      //   delete attrs['stroke-width'];\n      // }\n      // wrapper.attr(attrs);\n    }\n\n    if (!eventArgs) {\n      eventArgs = options._markerEventArgs = {\n        x: +options.x,\n        y: +options.y,\n        scaledX: options.x * groupConfig.scaleX,\n        scaledY: options.y * groupConfig.scaleY,\n        chartX: options.x * groupConfig.scaleX + groupConfig.grpXShift,\n        chartY: options.y * groupConfig.scaleY + groupConfig.grpYShift,\n        id: options.id,\n        label: options.label\n      };\n    }\n    raiseEventGroup(markerConfig.options.id, 'markerRollOver', eventArgs,\n      chart.getFromEnv('chartInstance'), markerConfig, UNDEF, UNDEF, UNDEF);\n  },\n\n  /**\n   * Hover out handler function for markers\n   * @param {Object} marker the marker which is hovered out\n   */\n  hoverOutFn = function (marker) {\n    let dataset = this, // eslint-disable-line no-invalid-this\n      chart = dataset.getFromEnv('chart'),\n      annotations = dataset.getChildren('mapAnnotations')[0],\n      shape = marker.markerShape,\n      wrapper = shape.getElement(),\n      markerConfig = marker.config,\n      options = shape.data('unfilteredConfig'),\n      attrs;\n\n    // element.node.style.cursor = 'default';\n    if (wrapper && options.hovereffect) {\n      if (shape.config.type === 'circle') {\n        // options._defaultattrs.fill = toRaphaelColor({\n        //   alpha: shape.config.rawAlpha,\n        //   color: shape.config.rawColor,\n        //   angle: 360 - shape.config.rawAngle,\n        //   ratio: shape.config.rawRatio,\n        //   radialGradient: shape.config.rawFillPattern === 'radial'\n        // });\n        attrs = extend2({\n          fillcolor: shape.config.rawColor,\n          fillalpha: shape.config.rawAlpha,\n          fillangle: shape.config.rawAngle,\n          fillratio: shape.config.rawRatio,\n          gradientUnits: 'objectBoundingBox',\n          radialGradient: shape.config.rawFillPattern === 'radial'\n        }, options._defaultattrs);\n      }\n      attrs = extend2({}, options._defaultattrs);\n      annotations.update(shape.getId(), attrs);\n      // if (wrapper.type === 'image') {\n      //   delete attrs.fill;\n      //   delete attrs.stroke;\n      //   delete attrs['stroke-width'];\n      // }\n      // wrapper.attr(attrs);\n    }\n    raiseEventGroup(markerConfig.id, 'markerRollOut',\n      options._markerEventArgs, chart.getFromEnv('chartInstance'), UNDEF, UNDEF, UNDEF);\n  },\n\n  /**\n   * Click handler function for markers\n   * @param {Object} e event object\n   * @param {Object} marker the marker which is clicked\n   */\n  clickFn = function (e, marker) {\n    let dataset = this, // eslint-disable-line no-invalid-this\n      markerOptions = marker.config.options,\n      // dataset = marker.dataset,\n      chart = dataset.getFromEnv('chart'),\n      shape = marker.markerShape,\n      options = shape.config,\n      groupConfig = shape.groupConfig,\n      linkClickFN = dataset.getFromEnv('linkClickFN'),\n      link = shape.config.link,\n      eventArgs = options._markerEventArgs;\n\n    // added the link calling function on tracker\n    link && linkClickFN && linkClickFN.call({\n      link: link\n    }, true);\n\n    if (!eventArgs) {\n      eventArgs = options._markerEventArgs = {\n        x: +options.x,\n        y: +options.y,\n        scaledX: options.x * groupConfig.scaleX,\n        scaledY: options.y * groupConfig.scaleY,\n        chartX: options.x * groupConfig.scaleX + groupConfig.grpXShift,\n        chartY: options.y * groupConfig.scaleY + groupConfig.grpYShift,\n        id: markerOptions.id,\n        label: markerOptions.label\n      };\n    }\n    chart.fireChartInstanceEvent('markerClick', eventArgs, e);\n  },\n\n  // colorize = function (original, obj) {\n  //   let col = !obj ? {\n  //     FCcolor: original\n  //   } : extend2(original.FCcolor, obj, false, true);\n\n  //   col.toString = toRaphaelColor;\n  //   return col;\n  // },\n\n  convertToObj = function (arr, idKey) {\n    let i = (arr && arr.length) || false,\n      key = idKey || 'id',\n      returnObj = {},\n      item;\n\n    if (!arr) {\n      return arr;\n    }\n\n    while (i--) {\n      item = arr[i];\n\n      (item[key] !== UNDEF) && (returnObj[item[key].toLowerCase()] = item);\n    }\n\n    return returnObj;\n  },\n  topLabelAlignmentFn = function (x, y, radius) {\n    return {\n      x: x.toString(),\n      y: (y - radius).toString(),\n      align: POSITION_CENTER,\n      valign: POSITION_TOP\n    };\n  },\n  leftLabelAlignmentFn = function (x, y, radius) {\n    return {\n      x: (x - radius).toString(),\n      y: y.toString(),\n      align: POSITION_RIGHT,\n      valign: POSITION_MIDDLE\n    };\n  },\n  rightLabelAlignmentFn = function (x, y, radius) {\n    return {\n      x: (x + radius).toString(),\n      y: y.toString(),\n      align: POSITION_LEFT,\n      valign: POSITION_MIDDLE\n    };\n  },\n  bottomLabelAlignmentFn = function (x, y, radius) {\n    return {\n      x: x.toString(),\n      y: (y + radius).toString(),\n      align: POSITION_CENTER,\n      valign: POSITION_BOTTOM\n    };\n  },\n  centerLabelAlignmentFn = function (x, y) {\n    return {\n      x: x.toString(),\n      y: y.toString(),\n      align: POSITION_CENTER,\n      valign: POSITION_MIDDLE\n    };\n  },\n  rightWrapWidthFn = function () {\n    return arguments[1];\n  },\n  leftWrapWidthFn = function (width, x) {\n    return (width - x);\n  },\n  centerWrapWidthFn = function (width, x) {\n    return (mathMin(x, width - x) * 2);\n  },\n  topWrapHeightFn = function () {\n    return arguments[1];\n  },\n  middleWrapHeightFn = function (height, y) {\n    return (mathMin(y, height - y) * 2);\n  },\n  bottomWrapHeightFn = function (height, y) {\n    return (height - y);\n  };\n\naddDep({\n  name: 'mapsAnimation',\n  type: 'animationRule',\n  extension: mapsAnimation\n});\n/**\n * Creates class Markers to render markers in maps\n */\nclass Markers extends Entities {\n  /**\n   * Creates an instance of Markers\n   */\n  constructor () {\n    super();\n    this.components = {};\n    this.getLabelAlignment = {\n      top: topLabelAlignmentFn,\n      left: leftLabelAlignmentFn,\n      right: rightLabelAlignmentFn,\n      bottom: bottomLabelAlignmentFn,\n      center: centerLabelAlignmentFn\n    };\n    this.getWrapWidth = {\n      right: rightWrapWidthFn,\n      left: leftWrapWidthFn,\n      center: centerWrapWidthFn\n    };\n    this.getWrapHeight = {\n      top: topWrapHeightFn,\n      middle: middleWrapHeightFn,\n      bottom: bottomWrapHeightFn\n    };\n    this.hoverFn = hoverFn;\n    this.hoverOutFn = hoverOutFn;\n    this.clickFn = clickFn;\n  }\n\n  /**\n   * Returns the name of the component\n   * @return {string} name of the component\n   */\n  getName () {\n    return 'markers';\n  }\n\n  /**\n   * Returns the type of the component\n   * @return {string} type of the component\n   */\n  getType () {\n    return 'dataset';\n  }\n\n  /**\n   * Configures the marker component\n   * @param {Object} markerJSONData JSON for dataset configurations\n   */\n  configureAttributes (markerJSONData) {\n    if (!markerJSONData) {\n      return;\n    }\n    this.JSONData = markerJSONData;\n    let dataset = this,\n      annObj,\n      mapAnnotations = dataset.getChildren('mapAnnotations') && dataset.getChildren('mapAnnotations')[0],\n      chart = dataset.getFromEnv('chart'),\n      markerOptions = chart.config.markerOpts;\n\n    if (!mapAnnotations) {\n      annObj = new Annotation();\n      dataset.attachChild(annObj, 'mapAnnotations');\n      mapAnnotations = dataset.getChildren('mapAnnotations')[0];\n    }\n    mapAnnotations.destroy();\n    dataset.calculateDataLimits();\n    if (markerOptions.dataEnabled) {\n      this._parseMarkers();\n    } else {\n      this.defineMarkersNShapes();\n    }\n    this.configureConnectors();\n  }\n\n  /**\n   * Function that calculates the marker radius limits.\n   * @memberof Markers\n   */\n  calculateMarkerRadiusLimits () {\n    if (!this.JSONData) {\n      return;\n    }\n    let dataset = this,\n      JSONData = dataset.JSONData,\n      conf = dataset.config,\n      chart = dataset.getFromEnv('chart'),\n      width = chart.config.width,\n      height = chart.config.height,\n      markerMaxRadius = JSONData.markermaxradius,\n      markerMinRadius = JSONData.markerminradius,\n      minMax = Markers.getMarkerRadiusLimits(width, height, markerMaxRadius, markerMinRadius);\n    conf.minRadius = minMax.min;\n    conf.maxRadius = minMax.max;\n  }\n\n  /**\n   * Function to calculate the data limits of chart\n   * @memberof Markers\n   */\n  calculateDataLimits () {\n    let dataset = this,\n      chart = dataset.getFromEnv('chart'),\n      conf = dataset.config,\n      jsonData = chart.jsonData,\n      markers = jsonData.markers || {},\n      markerData = markers[MARKER_ITEM_KEY] || [],\n      // numberFormatter = chart.components.numberFormatter,\n      numberFormatter = this.getFromEnv('number-formatter'),\n      min = +Infinity,\n      max = -Infinity,\n      markerObj,\n      cleanValue,\n      len,\n      value,\n      i;\n    for (i = 0, len = markerData.length; i < len; i++) {\n      markerObj = markerData[i];\n      value = markerObj.value;\n      cleanValue = numberFormatter.getCleanValue(value);\n      if (cleanValue !== null) {\n        min = mathMin(cleanValue, min);\n        max = mathMax(cleanValue, max);\n      }\n    }\n    conf.min = min;\n    conf.max = max;\n  }\n\n  /**\n   * Function to parse marker components\n   * @memberof Markers\n   */\n  _parseMarkers () {\n    let dataset = this,\n      chart = dataset.getFromEnv('chart'),\n      jsonData = chart.jsonData,\n      markers = jsonData.markers,\n      markerData = markers[MARKER_ITEM_KEY],\n      shapeArr = markers.shapes,\n      markerOptions = chart.config.markerOpts,\n      markerStyle = markerOptions.dataLabels.style,\n      // numberFormatter = chart.components.numberFormatter,\n      numberFormatter = this.getFromEnv('number-formatter'),\n      shapeObjs = dataset.components.shapeObjs = {},\n      markerObjs = dataset.components.markerObjs = {},\n      value,\n      i,\n      markerObj,\n      item,\n      shapeId,\n      markerConfig,\n      options,\n      id;\n\n    if (!markerData || !markerData.length) {\n      return;\n    }\n\n    if (shapeArr && shapeArr.length) {\n      i = shapeArr.length;\n      for (; i; i -= 1) {\n        item = shapeArr[i - 1];\n        if ((id = item.id.toLowerCase())) {\n          shapeObjs[id] = item;\n        }\n      }\n    }\n\n    i = markerData.length;\n\n    while (i--) {\n      item = markerData[i];\n\n      if ((id = (item.id && item.id.toLowerCase()))) {\n        value = item.value;\n        if (value !== UNDEF && value !== '') {\n          value = parseFloat(value);\n        }\n\n        markerObj = Markers._initializeMarkerItem(id, item, null, chart);\n        shapeId = markerObj.config.options.shapeid;\n        shapeId && typeof shapeId === 'string' && (shapeId = shapeId.toLowerCase());\n        markerConfig = markerObj.config;\n        options = markerConfig.options;\n        markerConfig.cleanValue = numberFormatter.getCleanValue(value);\n        if (markerConfig.cleanValue !== null) {\n          markerConfig.formattedValue = numberFormatter.dataLabels(value);\n        } else {\n          markerConfig.formattedValue = UNDEF;\n        }\n        markerConfig.fillColor = pluck(options.fillcolor, options.color, markerOptions.fillColor);\n        markerConfig.fillAlpha = pluck(options.fillalpha, options.alpha, markerOptions.fillAlpha);\n        markerConfig.fillRatio = pluck(options.fillratio, markerOptions.fillRatio);\n        markerConfig.fillAngle = pluck(options.fillangle, markerOptions.fillAngle);\n        markerConfig.borderThickness = pluckNumber(options.borderthickness, markerOptions.borderThickness);\n        markerConfig.borderColor = pluck(options.bordercolor, markerOptions.borderColor);\n        markerConfig.borderAlpha = pluck(options.borderalpha, markerOptions.borderAlpha);\n        markerConfig.labelPadding = (options.labelpadding || markerOptions.labelPadding);\n        markerConfig.fontColor = pluck(options.labelcolor, markerStyle.fontColor);\n        markerConfig.labelBgColor = pluck(options.labelbgcolor, markerStyle.labelBgColor) || BLANK;\n        markerConfig.labelBorderColor = pluck(options.labelbordercolor, markerStyle.labelBorderColor) || BLANK;\n        if (item.__hideMarker) {\n          markerObj._isHidden = true;\n        }\n\n        if (shapeId) {\n          markerObj.shapeObj = shapeObjs[shapeId];\n        }\n\n        markerObjs[id] = markerObj;\n      }\n    }\n  }\n\n  /**\n   * Creates the marker objects abd their specified shapes\n   */\n  defineMarkersNShapes () {\n    let dataset = this,\n      chart = dataset.getFromEnv('chart'),\n      jsonData = chart.jsonData,\n      markers = jsonData.markers,\n      defineArr = markers.definition,\n      // numberFormatter = chart.components.numberFormatter,\n      numberFormatter = this.getFromEnv('number-formatter'),\n      markerOptions = chart.config.markerOpts,\n      markerStyle = markerOptions.dataLabels.style,\n      defineObject = convertToObj(defineArr) || {},\n      applyObject = convertToObj(markers.application) || {},\n      shapeArr = markers.shapes,\n      shapeObjs = dataset.components.shapeObjs = dataset.components.shapeObjs ||\n                      (dataset.components.shapeObjs = {}),\n      markerObjs = dataset.components.markerObjs = dataset.components.markerObjs ||\n        (dataset.components.markerObjs = {}),\n      shapeObjHash = {},\n      markerObjHash = {},\n      options,\n      markerConfig,\n      value,\n      i,\n      markerObj,\n      item,\n      shapeId,\n      id;\n\n    if (!defineArr || !defineArr.length) {\n      return;\n    }\n\n    // Store all the previously present marker and shape configurations\n    for (i in shapeObjs) {\n      shapeObjHash[i] = false;\n    }\n    for (i in markerObjs) {\n      markerObjHash[i] = false;\n    }\n\n    if (shapeArr && shapeArr.length) {\n      i = shapeArr.length;\n      for (; i; i -= 1) {\n        item = shapeArr[i - 1];\n        if ((id = item.id.toLowerCase())) {\n          shapeObjs[id] = item;\n          // If a previously existing shape configuration is present, mark it true\n          shapeObjHash[id] = true;\n        }\n      }\n    }\n\n    for (id in defineObject) {\n      item = defineObject[id];\n      markerObj = markerObjs[id] = Markers._initializeMarkerItem(id, item, applyObject[id], chart);\n      // If a previously existing marker configuration is present, mark it true\n      markerObjHash[id] = true;\n      shapeId = markerObj.config.options.shapeid;\n      markerConfig = markerObj.config;\n      value = item.value;\n      markerConfig.cleanValue = numberFormatter.getCleanValue(value);\n      options = markerConfig.options;\n      if (markerConfig.cleanValue !== null) {\n        markerConfig.formattedValue = numberFormatter.dataLabels(value);\n      } else {\n        markerConfig.formattedValue = UNDEF;\n      }\n      markerConfig.fillColor = pluck(options.fillcolor, options.color, markerOptions.fillColor);\n      markerConfig.fontColor = pluck(options.labelcolor, markerStyle.fontColor);\n      markerConfig.fillAlpha = pluck(options.fillalpha, options.alpha, markerOptions.fillAlpha);\n      markerConfig.fillRatio = pluck(options.fillratio, markerOptions.fillRatio);\n      markerConfig.fillAngle = pluck(options.fillangle, markerOptions.fillAngle);\n      markerConfig.borderThickness = pluckNumber(options.borderthickness, markerOptions.borderThickness);\n      markerConfig.borderColor = pluck(options.bordercolor, markerOptions.borderColor);\n      markerConfig.borderAlpha = pluck(options.borderalpha, markerOptions.borderAlpha);\n      markerConfig.labelPadding = (options.labelpadding || markerOptions.labelPadding);\n      markerConfig.options.tooltext = pluck(options.tooltext, markerOptions.tooltext);\n      markerConfig.link = options.link;\n      if (shapeId) {\n        markerObj.shapeObj = shapeObjs[shapeId.toLowerCase()];\n      }\n    }\n\n    // Remove all the false marked configurations. This configurations are disposed.\n    for (i in shapeObjHash) {\n      if (!shapeObjHash[i]) {\n        delete shapeObjs[i];\n      }\n    }\n    for (i in markerObjs) {\n      if (!markerObjHash[i]) {\n        delete markerObjs[i];\n      }\n    }\n  }\n\n  /**\n   * Return marker radius limit for a particular marker\n   * @param {number} width available width\n   * @param {number} height available height\n   * @param {number} userMax user defined max value\n   * @param {number} userMin user defined min value\n   * @return {Object} Max, Min value\n   */\n  static getMarkerRadiusLimits (width, height, userMax, userMin) {\n    let dime = mathMin(width, height),\n      factor = 0.02,\n      times = 3.5,\n      minR = (factor * dime),\n      maxR = (factor * times * dime),\n      finalUserMin,\n      finalUserMax;\n\n    finalUserMin = parseFloat(userMin);\n    finalUserMax = parseFloat(userMax);\n\n    if (!isNaN(finalUserMin) && !isNaN(finalUserMax)) {\n      if (finalUserMin < finalUserMax) {\n        return {\n          min: finalUserMin,\n          max: finalUserMax\n        };\n      }\n      return {\n        min: finalUserMax,\n        max: finalUserMin\n      };\n    } else if (!isNaN(finalUserMin)) {\n      return {\n        min: finalUserMin,\n        max: 10 * finalUserMin\n      };\n    } else if (!isNaN(finalUserMax)) {\n      return {\n        min: parseInt((finalUserMax / 10), 10),\n        max: finalUserMax\n      };\n    }\n    return {\n      min: minR,\n      max: maxR\n    };\n  }\n\n  /**\n   * Function that returns the upper and lower data limits\n   * @return {Object} containing the upper and lower data limits\n   * @memberof Markers\n   */\n  getDataLimits () {\n    let dataset = this,\n      conf = dataset.config;\n    return {\n      min: conf.min,\n      max: conf.max\n    };\n  }\n\n  /**\n   * Initialise a marker item\n   * @param {string} id marker id\n   * @param {Object} markerDefinition marker configurations\n   * @param {Object} markerApplication configurations to be added\n   * @return {Object} marker item object\n   */\n  static _initializeMarkerItem (id, markerDefinition, markerApplication) {\n    let markerObj = {},\n      config = markerObj.config,\n      opts;\n    if (!config) {\n      config = markerObj.config = {};\n    }\n    config.id = id;\n    config.definition = markerDefinition;\n    config.application = markerApplication;\n\n    // new member variables for value markers.\n    config.hasValue = null;\n    config.value = null;\n    config.options = null;\n\n    config.label = null;\n    config.markerShape = null;\n    config.markerLabel = null;\n    config.drawOptions = { shape: null, label: null };\n\n    config.drawComplete = false;\n\n    opts = markerObj.config.options = extend2({}, config.definition);\n\n    if (config.dataEnabled) {\n      if (!isNaN(opts.value) && opts.value !== '') {\n        markerObj.value = parseFloat(opts.value);\n        markerObj.hasValue = true;\n      }\n    } else if (config.applyAll) {\n      config.options = extend2(opts, config.application);\n    } else if (markerApplication) {\n      config.options = extend2(opts, config.application);\n    }\n    return markerObj;\n  }\n\n  /**\n   * Function that configures the map connectors\n   * @memberof Markers\n   */\n  configureConnectors () {\n    let dataset = this,\n      chart = dataset.getFromEnv('chart'),\n      annotations = dataset.getChildren('mapAnnotations')[0],\n      jsonData = chart.jsonData,\n      datasetComponents = dataset.components,\n      markers = jsonData.markers || {},\n      connectors = markers.connector || markers.connectors || [],\n      markerObjs = datasetComponents.markerObjs,\n      length = connectors.length,\n      connectorComponents = dataset.components.connectors,\n      getMouseOverFn = function (eventArgs) {\n        return function (e) {\n          let shape = this, // eslint-disable-line no-invalid-this\n            unfilteredConfig = shape.data('unfilteredConfig');\n\n          if (unfilteredConfig.hoverEffect) {\n            annotations.update(shape.getId(), unfilteredConfig._hoverAttrs);\n          }\n          chart.fireChartInstanceEvent('connectorrollover', eventArgs, e);\n        };\n      },\n      getMouseOutFn = function (eventArgs) {\n        return function (e) {\n          let shape = this, // eslint-disable-line no-invalid-this\n            unfilteredConfig = shape.data('unfilteredConfig');\n\n          if (unfilteredConfig.hoverEffect) {\n            annotations.update(shape.getId(), unfilteredConfig._defaultAttrs);\n          }\n          chart.fireChartInstanceEvent('connectorrollout', eventArgs, e);\n        };\n      },\n      getClickFn = function (eventArgs) {\n        return function (e) {\n          chart.fireChartInstanceEvent('connectorClick', eventArgs, e);\n        };\n      },\n      chartConnOptions = chart.config.connectorOpts,\n      connectorItem = {},\n      config,\n      options,\n      fromMarker,\n      toMarker,\n      label,\n      toolText,\n      thickness,\n      color,\n      alpha,\n      hovercolor,\n      hoveralpha,\n      hoverthickness,\n      connLabelConfig,\n      obj,\n      i;\n    connectorComponents = dataset.components.connectors = [];\n    for (i = 0; i < length; i++) {\n      obj = connectors[i];\n      if (!obj.from && !obj.to) {\n        continue;\n      }\n      fromMarker = markerObjs[obj.from.toLowerCase()];\n      toMarker = markerObjs[obj.to.toLowerCase()];\n\n      if (!fromMarker || !toMarker) {\n        continue;\n      }\n      label = connectors[i].label;\n      // if (connectorConfig.hideOpen &&\n      //         (fromMarker._isHidden || toMarker._isHidden)) {\n      //     continue;\n      // }\n      connectorItem = connectorComponents[i];\n      !connectorItem && (connectorItem = connectorComponents[i] = {});\n      !connectorItem.config && (config = connectorItem.config = {});\n      !connectorItem.graphics && (connectorItem.graphics = {});\n      config = connectorItem.config = extend2({}, obj);\n      config.fromMarker = fromMarker;\n      config.toMarker = toMarker;\n      config.link = obj.link;\n      config.showTooltip = pluckNumber(obj.showtooltip, chartConnOptions.showTooltip);\n      toolText = config.tooltext = config.showTooltip ? pluck(obj.tooltext, chartConnOptions.tooltext) : BLANK;\n      thickness = config.thickness = pluck(obj.thickness, chartConnOptions.thickness);\n      color = config.color = pluck(obj.color, chartConnOptions.color);\n      alpha = config.alpha = pluck(obj.alpha, chartConnOptions.alpha);\n      config.hoverEffect = pluckNumber(obj.showhovereffect, chartConnOptions.showHoverEffect);\n      hovercolor = pluck(obj.hovercolor, chartConnOptions.hoverColor, color);\n      hoveralpha = pluck(obj.hoveralpha, chartConnOptions.hoverAlpha, alpha);\n      hoverthickness = pluck(obj.hoverthickness, chartConnOptions.hoverThickness, thickness);\n      config.dashed = pluck(obj.dashed, chartConnOptions.dashed);\n      config.dashLen = pluckNumber(obj.dashlen, chartConnOptions.dashlen);\n      config.dashGap = pluckNumber(obj.dashgap, chartConnOptions.dashgap);\n      if (toolText) {\n        config.tooltext = toolText = parseUnsafeString(parseTooltext(toolText, [3, 40, 41, 42, 43], {\n          label: label,\n          fromId: fromMarker.config.definition.id,\n          toId: toMarker.config.definition.id,\n          fromLabel: fromMarker.config.definition.label,\n          toLabel: toMarker.config.definition.label\n        }, options), false);\n      }\n      config.eventArgs = {\n        fromMarkerId: fromMarker.config.id,\n        toMarkerId: toMarker.config.id,\n        label: label\n      };\n      config._hoverAttrs = {\n        // stroke: colorize({\n        //   color: hovercolor,\n        //   alpha: hoveralpha\n        // }).toString(),\n        // 'stroke-width': hoverthickness\n        color: hovercolor,\n        alpha: hoveralpha,\n        thickness: hoverthickness\n      };\n      config._defaultAttrs = {\n        // stroke: colorize({\n        //   color: color,\n        //   alpha: alpha\n        // }).toString(),\n        // 'stroke-width': thickness\n        color: color,\n        alpha: alpha,\n        thickness: thickness\n      };\n      config.type = LINE_STR;\n      config.onclick = getClickFn(config.eventArgs);\n      config.onmouseover = getMouseOverFn(config.eventArgs);\n      config.onmouseout = getMouseOutFn(config.eventArgs);\n      if (label) {\n        connLabelConfig = connectorItem.labelConfig;\n        !connLabelConfig && (connLabelConfig = connectorItem.labelConfig = {});\n        connLabelConfig.type = TEXT_STR;\n        connLabelConfig.text = label;\n        connLabelConfig.align = POSITION_CENTER;\n        connLabelConfig.valign = POSITION_MIDDLE;\n        connLabelConfig.font = chartConnOptions.font;\n        connLabelConfig.fillcolor = pluck(obj.labelcolor, chartConnOptions.fontColor);\n        connLabelConfig.bgcolor = pluck(obj.labelbgcolor, chartConnOptions.labelBgColor);\n        connLabelConfig.bordercolor = pluck(obj.labelbordercolor, chartConnOptions.labelBorderColor);\n        connLabelConfig.tooltext = config.tooltext;\n      }\n    }\n  }\n\n  /**\n   * Function that draws the marker components\n   * @memberof Markers\n   */\n  draw () {\n    let dataset = this,\n      chart = dataset.getFromEnv('chart'),\n      conf = dataset.config,\n      annotations = dataset.getChildren('mapAnnotations')[0],\n      markers = dataset.components.markerObjs,\n      chartConf = chart.config,\n      chartMarkerOpts = chartConf.markerOpts,\n      scalingParams = chartConf.scalingParams,\n      annConfig = chart.config.annotationConfig,\n      // toolTipController = dataset.getFromEnv('toolTipController'),\n      // entityDataset = chart.getDatasets()[0],\n      markerItems = [],\n      markerLabels = [],\n      appliedMarkers = {},\n      appliedObj,\n      markerItem,\n      rawConfig,\n      // shapeId,\n      config,\n      id,\n      i,\n      // markerElem,\n      // markerLabelElem,\n      markerLabelGroup,\n      markerGroup,\n      validShape = {};\n\n    annotations.destroy();\n\n    dataset.createContainer();\n    dataset._drawConnectors();\n\n    dataset.imageLoadCount = 0;\n    dataset.imageCount = 0;\n\n    // chartConf.labelsOnTop && entityDataset.getChildren('mapLabelAnnotations') &&\n    //   entityDataset.getChildren('mapLabelAnnotations')[0].annotation.groups[0].store.element.toFront();\n\n    // Have to configure the autoscale property in draw function as the scale factor is\n    // available only after spaceManagement\n    conf.autoScale = chartMarkerOpts.autoScale ? scalingParams.sFactor : 1;\n    for (id in markers) {\n      appliedObj = null;\n      markerItem = markers[id];\n      config = markerItem.config;\n      // shapeId = config.options.shapeid;\n\n      if (!config.conIsHidden) {\n        appliedObj = this._drawMarkerItem(markerItem);\n      }\n\n      if (!appliedObj) {\n        continue;\n      }\n      validShape[id] = appliedObj;\n      config._annotationIndex = markerItems.length;\n      appliedMarkers[id] = markerItem;\n      if (appliedObj.markerShape) {\n        rawConfig = Object.assign({\n          align: 'center',\n          valign: 'middle',\n          animationLabel: 'markerItem',\n          autoscale: appliedObj.markerShape.type === 'image' ? 0 : 1\n        }, appliedObj.markerShape);\n        markerItems.push(rawConfig);\n      }\n\n      if (appliedObj.markerLabel) {\n        rawConfig = Object.assign({ animationLabel: 'markerItem', id: appliedObj.markerShape.id }, appliedObj.markerLabel);\n        markerLabels.push(rawConfig);\n      }\n    }\n\n    // create the markers and marker labels\n    markerGroup = annotations.addGroup(Object.assign(annConfig, {\n      id: 'markers',\n      fillalpha: '100',\n      items: markerItems,\n      scaleimages: 1\n    }), dataset);\n\n    markerLabelGroup = annotations.addGroup(Object.assign(annConfig, {\n      id: 'markerLabels',\n      items: markerLabels,\n      scaleimages: 1\n    }), dataset);\n\n    dataset.components.markerGroup = markerGroup;\n    dataset.components.markerLabelGroup = markerLabelGroup;\n\n    i = 0;\n    for (id in markers) {\n      if (!validShape[id]) {\n        continue;\n      }\n\n      markerItem = markers[id];\n      markerItem.markerShape = markerGroup.retrieveItem(markerItems[i].id);\n\n      markerItem.markerShape.data('unfilteredConfig', markerItems[i]);\n\n      if (validShape[id].markerLabel) {\n        markerItem.markerLabel = markerLabelGroup.retrieveItem(markerItems[i].id);\n        markerItem.markerLabel.data('unfilteredConfig', markerLabels[i]);\n      }\n      i++;\n    }\n    dataset.addJob('buildKdtree', dataset._buildKdTree.bind(dataset), priorityList.kdTree);\n  }\n\n  /**\n   * Function to create a K-dimensional tree\n   * @memberof Markers\n   */\n  _buildKdTree () {\n    let dataset = this,\n      kdArrayMap = dataset.components.kdArrayMap,\n      markerGroup = dataset.components.markerGroup,\n      kdPointsArr = [],\n      id,\n      i,\n      items = markerGroup && markerGroup.items,\n      len = (items && items.length) || 0;\n\n    for (i = 0; i < len; i++) {\n      id = items[i].config.id;\n      kdArrayMap[id] && kdPointsArr.push(kdArrayMap[id]);\n    }\n\n    if (!dataset.components.kDTree) {\n      // Create a new instance of the KdTree class and store its reference in the current instance.\n      dataset.components.kDTree = new KdTree(true);\n      // componentFactory(dataset, KdTree, 'kDTree');\n    }\n    // dataset.components.kDTree._setSearchLimit(Infinity, Infinity);\n    // dataset.components.kDTree.buildKdTree(kdPointsArr);\n    dataset.components.kDTree._setSearchLimit(Infinity, Infinity);\n    dataset.components.kDTree.buildKdTree(kdPointsArr);\n  }\n\n  /**\n   * Draws individual marker items\n   *\n   * @param {Object} marker marker configurations\n   * @returns {Object} Object containing marker shapes and labels\n   * @memberof Markers\n   */\n  _drawMarkerItem (marker) {\n    let dataset = this,\n      chart = dataset.getFromEnv('chart'),\n      conf = chart.config,\n      datasetConfig = dataset.config,\n      scalingParams = conf.scalingParams,\n      markerConfig = marker.config,\n      options = markerConfig.options,\n      definition = markerConfig.definition,\n      chartMarkerOpts = conf.markerOpts,\n      markerStyle = chartMarkerOpts.dataLabels.style,\n      shapeId = options.shapeid,\n      itemScale = (options.scale || 1),\n      label = options.label || BLANK,\n      scaleFactor = chart.config.scalingParams.scaleFactor * chart.config.baseScaleFactor,\n      labelPos = (options.labelpos || POSITION_TOP).toLowerCase(),\n      value = (markerConfig.formattedValue === UNDEF) ? UNDEF : markerConfig.formattedValue,\n      tooltext = options.tooltext || chartMarkerOpts.tooltext,\n      radius = (pluckNumber(definition.radius, markerConfig.radius, chartMarkerOpts.radius) *\n                      itemScale * datasetConfig.autoScale) || 0.0001,\n      fillColor = markerConfig.fillColor,\n      fillAlpha = markerConfig.fillAlpha,\n      fillRatio = markerConfig.fillRatio,\n      fillAngle = markerConfig.fillAngle,\n      borderThickness = markerConfig.borderThickness,\n      borderColor = markerConfig.borderColor,\n      borderAlpha = markerConfig.borderAlpha,\n      annotations = dataset.getChildren('mapAnnotations')[0],\n      labelObj,\n      align,\n      valign,\n      baseWidth,\n      baseHeight,\n      xOffset,\n      yOffset,\n      wrapWidth,\n      wrapHeight,\n      labelPadding,\n      shapeObj,\n      // fillAttrs,\n      // hoverFillAttrs,\n      temp,\n      // shapeType,\n      calcX,\n      calcY,\n      kdPoint,\n      innerradius,\n      sides,\n      type,\n      kdArrayMap = dataset.components.kdArrayMap || (dataset.components.kdArrayMap = {}),\n      markerId = marker.config.id;\n\n    markerConfig.autoScale = chartMarkerOpts.autoScale ? scaleFactor : 1;\n    if (!shapeId) {\n      return;\n    }\n\n    if (tooltext) {\n      tooltext = parseUnsafeString(parseTooltext(tooltext, [1, 2, 3], {\n        formattedValue: value,\n        label: label\n      }, options), false);\n    } else {\n      tooltext = (value ? (label + chartMarkerOpts.tooltipSepChar + value) : label);\n    }\n\n    if (value !== UNDEF && value !== null) {\n      /* value_for_markers */\n      label = label + chartMarkerOpts.labelSepChar + value;\n    } else {\n      if (!isNaN(itemScale)) {\n        if (itemScale < 0) {\n          itemScale = 0;\n        } else if (itemScale > 5) {\n          itemScale = 5;\n        }\n      } else {\n        itemScale = 1;\n      }\n    }\n\n    extend2(options, {\n      x: options.x && options.x.toString(),\n      y: options.y && options.y.toString(),\n      fillcolor: fillColor,\n      fillalpha: fillAlpha,\n      fillratio: fillRatio,\n      fillangle: fillAngle,\n      borderthickness: borderThickness,\n      bordercolor: borderColor,\n      borderalpha: borderAlpha,\n      hovereffect: pluck(chartMarkerOpts.showHoverEffect),\n      radius: radius && radius.toString(),\n      // tooltext: chartMarkerOpts.showTooltip ? tooltext : 0,\n      link: options.link,\n      showshadow: pluckNumber(options.showshadow, markerConfig.shadow),\n      _markerLabel: label, // for event\n      _markerId: options.id, // for event\n      id: (options.id + BLANK).toLowerCase()\n    });\n\n    delete options.tooltext;\n\n    markerConfig.tooltext = chartMarkerOpts.showTooltip ? tooltext : false;\n\n    // shapeType = options.type;\n\n    calcX = (Number(options.x) * scalingParams.sFactor) + scalingParams.translateX;\n    calcY = (Number(options.y) * scalingParams.sFactor) + scalingParams.translateY;\n    radius = options.radius;\n\n    if (shapeId === 'triangle') {\n      extend2(options, {\n        type: 'polygon',\n        sides: 3,\n        startangle: chartMarkerOpts.startAngle\n\n      });\n      type = POLYGON_STR;\n      sides = 3;\n    } else if (shapeId === 'diamond') {\n      extend2(options, {\n        type: 'polygon',\n        sides: 4,\n        startangle: chartMarkerOpts.startAngle\n      });\n      type = POLYGON_STR;\n      sides = 4;\n    } else if (shapeId === 'arc') {\n      innerradius = radius * INNERRADIUSFACTOR;\n\n      extend2(options, {\n        type: 'arc',\n        startangle: 0,\n        endangle: 360,\n        innerradius: innerradius\n      });\n      type = ACR_STR;\n    } else if (shapeId === 'circle') {\n      options.type = CIRCLE_STR;\n      type = CIRCLE_STR;\n    } else {\n      shapeObj = dataset.getShapeArgs.call(marker);\n\n      if (!chartMarkerOpts.dataEnabled || !chartMarkerOpts.valueToRadius || options.radius === UNDEF) {\n        !shapeObj.radius && (shapeObj.radius = chartMarkerOpts.radius);\n        shapeObj.radius *= (itemScale * markerConfig.autoScale);\n      } else {\n        delete shapeObj.radius;\n      }\n\n      extend2(options, shapeObj);\n      options.id = options._markerId && options._markerId.toLowerCase();\n      innerradius = shapeObj.innerradius;\n      shapeObj.radius && (radius = shapeObj.radius);\n      type = shapeObj.type && shapeObj.type.toLowerCase();\n      sides = shapeObj.sides;\n      radius = Number(radius);\n      if (radius && innerradius && (radius < innerradius)) {\n        temp = radius;\n        options.radius = radius = innerradius;\n        options.innerradius = innerradius = temp;\n      }\n    }\n    options.type = options.type && options.type.toLowerCase();\n    // Setting the hover attributes after all the cosmetics have been finalized.\n    extend2(options, {\n      hoverfillcolor: pluck(options.fillhovercolor, chartMarkerOpts.hoverFillColor, options.fillcolor),\n      hoverfillalpha: pluck(options.fillhoveralpha, chartMarkerOpts.hoverFillAlpha, options.fillalpha),\n      hoverfillratio: pluck(options.fillhoverratio, chartMarkerOpts.hoverFillRatio, options.fillratio),\n      hoverfillangle: pluck(options.fillhoverangle, chartMarkerOpts.hoverFillAngle, options.fillangle),\n      hoverborderthickness: pluckNumber(options.borderhoverthickness,\n        chartMarkerOpts.hoverBorderThickness,\n        options.borderthickness),\n      hoverbordercolor: pluck(options.borderhovercolor,\n        chartMarkerOpts.hoverBorderColor, options.bordercolor),\n      hoverborderalpha: pluck(options.borderhoveralpha,\n        chartMarkerOpts.hoverBorderAlpha, options.borderalpha)\n    });\n\n    // fillAttrs = {\n    //   alpha: options.fillalpha,\n    //   color: options.fillcolor,\n    //   angle: 360 - options.fillangle,\n    //   ratio: options.fillratio\n    // };\n\n    // hoverFillAttrs = {\n    //   alpha: options.hoverfillalpha,\n    //   color: options.hoverfillcolor,\n    //   angle: options.hoverfillangle,\n    //   ratio: options.hoverfillratio\n    // };\n\n    /** Hover Effect for markers **/\n    // options._defaultattrs = {\n    //   fill: toRaphaelColor(fillAttrs),\n    //   'stroke-width': options.showborder !== '0' ? options.borderthickness : 0,\n    //   stroke: convertColor(options.bordercolor, options.borderalpha)\n    // };\n\n    // options._hoverattrs = {\n    //   fill: toRaphaelColor(hoverFillAttrs),\n    //   'stroke-width': options.showborder !== '0' ? options.hoverborderthickness : 0,\n    //   stroke: convertColor(options.hoverbordercolor, options.hoverborderalpha)\n    // };\n    options._hoverattrs = {\n      fillalpha: options.hoverfillalpha,\n      fillcolor: options.hoverfillcolor,\n      fillangle: options.hoverfillangle,\n      fillratio: options.hoverfillratio,\n      borderThickness: options.showborder !== '0' ? options.hoverborderthickness : 0,\n      borderColor: options.hoverbordercolor,\n      borderAlpha: options.hoverborderalpha\n    };\n    options._defaultattrs = {\n      fillalpha: options.fillalpha,\n      fillcolor: options.fillcolor,\n      fillangle: options.fillangle,\n      fillratio: options.fillratio,\n      borderThickness: options.showborder !== '0' ? options.borderthickness : 0,\n      borderColor: options.bordercolor,\n      borderAlpha: options.borderalpha\n    };\n\n    if (options.type === 'image') {\n      // In case of image there should not be a border around it by default.\n      options.borderthickness = options.borderthickness || 0;\n\n      options.onload = function (imageattr) {\n        let shape = this,\n          width = imageattr.width,\n          height = imageattr.height;\n\n        kdPoint = {};\n        options = shape.config;\n        calcX = (Number(options.derivedX) - (width / (2 * scalingParams.sFactor))) * scalingParams.sFactor;\n        calcY = (Number(options.derivedY) - (height / (2 * scalingParams.sFactor))) * scalingParams.sFactor;\n\n        kdPoint = kdArrayMap[markerId] || (kdArrayMap[markerId] = {});\n\n        kdPoint.x = calcX + scalingParams.translateX;\n        kdPoint.y = calcY + scalingParams.translateY;\n        kdPoint.element = marker;\n\n        kdPoint.shapeInfo = {\n          type: 'rect',\n          width: width,\n          height: height\n        };\n        if (width && height) {\n          annotations.update(shape.getId(), {\n            x: calcX,\n            y: calcY,\n            width: width,\n            height: height,\n            autoscale: 0\n          });\n        }\n        dataset.imageLoadCount++;\n\n        if (dataset.imageLoadCount === dataset.imageCount) {\n          dataset._buildKdTree();\n        }\n      };\n\n      options.onerror = function () {\n        dataset.imageLoadCount++;\n        if (dataset.imageLoadCount === dataset.imageCount) {\n          dataset._buildKdTree();\n        }\n      };\n\n      dataset.imageCount++;\n    } else {\n      kdPoint = kdArrayMap[markerId] || (kdArrayMap[markerId] = {});\n\n      kdPoint.x = calcX;\n      kdPoint.y = calcY;\n      kdPoint.element = marker;\n\n      kdPoint.shapeInfo = {\n        type: type,\n        sides: sides,\n        radius: Number(radius) + (options.borderthickness / 2),\n        innerradius: innerradius\n      };\n    }\n\n    markerConfig.drawOptions.shape = options;\n    if (!chartMarkerOpts.showLabels) {\n      return {\n        markerShape: options\n      };\n    }\n\n    // creating marker label options here.\n    labelPadding = (options.labelpadding || chartMarkerOpts.labelPadding);\n    labelObj = dataset._getLabelOptions(labelPos, labelPadding, options);\n    align = labelObj.align;\n    valign = labelObj.valign;\n    baseWidth = markerConfig._labelBaseWidth;\n    baseHeight = markerConfig._labelBaseHeight;\n    xOffset = markerConfig._labelXOffset;\n    yOffset = markerConfig._labelYOffset;\n\n    wrapWidth = chartMarkerOpts.labelWrapWidth ? chartMarkerOpts.labelWrapWidth : (dataset.getWrapWidth[align](baseWidth, Number(labelObj.x) + xOffset));\n    wrapHeight = chartMarkerOpts.labelWrapHeight ? chartMarkerOpts.labelWrapHeight : (dataset.getWrapHeight[valign](baseHeight, Number(labelObj.y) + yOffset));\n\n    if (wrapWidth > labelPadding) {\n      wrapWidth -= labelPadding;\n    }\n    if (wrapHeight > labelPadding) {\n      wrapHeight -= labelPadding;\n    }\n\n    markerConfig.drawOptions.label = extend2({ type: 'text' }, {\n      text: label,\n      tooltext: options.tooltext,\n      x: labelObj.x,\n      y: labelObj.y,\n      align: align,\n      valign: labelObj.valign,\n      wrap: 1,\n      wrapwidth: wrapWidth,\n      wrapheight: wrapHeight,\n      fontsize: markerStyle.fontSize / scalingParams.sFactor,\n      font: markerStyle.fontFamily,\n      color: markerConfig.fontColor,\n      bgcolor: markerConfig.labelBgColor || BLANK,\n      bordercolor: markerConfig.labelBorderColor || BLANK\n    });\n\n    return {\n      markerShape: options,\n      markerLabel: markerConfig.drawOptions.label\n    };\n  }\n\n  /**\n   * highlight the markers\n   * @param {Object|boolean} kdPoint point object of markers\n   * @param {Event} e interaction events\n   */\n  highlightPoint (kdPoint, e) {\n    let marker = kdPoint.element,\n      dataset = this,\n      originalEvent = e.originalEvent,\n      chart = dataset.getFromEnv('chart'),\n      toolTipController = dataset.getFromEnv('toolTipController'),\n      currentToolTip = dataset.config.currentToolTip,\n      lastHoveredPoint = chart.config.lastHoveredPoint;\n\n    if (lastHoveredPoint && lastHoveredPoint !== kdPoint) {\n      lastHoveredPoint && dataset.hoverOutFn(lastHoveredPoint.element);\n      chart.config.lastHoveredPoint = null;\n      toolTipController.hide(currentToolTip);\n    }\n\n    if (kdPoint === false) {\n      return;\n    }\n\n    if (e.type === 'click' || e.type === 'touchstart') {\n      if (chart.config.lastHoveredPoint !== kdPoint) {\n        dataset.hoverFn(marker);\n      }\n      dataset.clickFn(e, marker);\n    } else if (e.type === 'mousemove') {\n      if (chart.config.lastHoveredPoint !== kdPoint) {\n        dataset.hoverFn(marker);\n      }\n    }\n    if (marker.config.tooltext) {\n      if (currentToolTip) {\n        toolTipController.draw(originalEvent, marker.config.tooltext, currentToolTip);\n      } else {\n        currentToolTip = dataset.config.currentToolTip =\n          toolTipController.draw(originalEvent, marker.config.tooltext);\n      }\n    }\n    chart.config.lastHoveredPoint = kdPoint;\n  }\n\n  /**\n   * Function that draws the connectors\n   * @memberof Markers\n   */\n  _drawConnectors () {\n    let dataset = this,\n      chart = dataset.getFromEnv('chart'),\n      annConfig = chart.config.annotationConfig,\n      datasetComponents = dataset.components,\n      connectors = datasetComponents.connectors || (dataset.components.connectors = []),\n      connector,\n      connectorLabel,\n      length = connectors.length,\n      scalingParams = chart.config.scalingParams,\n      chartConnOptions = chart.config.connectorOpts,\n      showConnectorLabels = chartConnOptions.showLabels,\n      annotations = dataset.getChildren('mapAnnotations')[0],\n      i,\n      j,\n      connectorOptions = [],\n      connectorLabelItems = [],\n      x,\n      y,\n      toX,\n      toY,\n      fromMarkerConfig,\n      toMarkerConfig,\n      connectorGroup,\n      connectorLabelGroup,\n      rawConfig,\n      groups = [],\n      validConnector = {};\n    groups.push({\n      id: 'connectorLabels',\n      fillalpha: '100',\n      items: connectorLabelItems\n    });\n    groups.push({\n      id: 'connectors',\n      fillalpha: '100',\n      items: connectorOptions\n    });\n\n    for (i = 0; i < length; i++) {\n      if (!connectors[i]) {\n        continue;\n      }\n      validConnector[i] = true;\n      fromMarkerConfig = connectors[i].config.fromMarker.config;\n      toMarkerConfig = connectors[i].config.toMarker.config;\n      x = fromMarkerConfig.options.x;\n      y = fromMarkerConfig.options.y;\n      toX = toMarkerConfig.options.x;\n      toY = toMarkerConfig.options.y;\n      connectors[i].config.x = x;\n      connectors[i].config.y = y;\n      connectors[i].config.tox = toX;\n      connectors[i].config.toy = toY;\n\n      rawConfig = Object.assign({ animationLabel: 'markerItem' }, connectors[i].config);\n      connectorOptions.push(rawConfig);\n\n      if (connectors[i].labelConfig && showConnectorLabels) {\n        connectors[i].labelConfig.x = ((Number(x) + Number(toX)) / 2).toString();\n        connectors[i].labelConfig.y = ((Number(y) + Number(toY)) / 2).toString();\n        // base scale factor, taken from chart config is required to calculate font size\n        connectors[i].labelConfig.fontsize = (chartConnOptions.fontSize /\n                          (scalingParams.scaleFactor * chart.config.baseScaleFactor));\n\n        rawConfig = Object.assign({ animationLabel: 'markerItem' }, connectors[i].labelConfig);\n        connectorLabelItems.push(rawConfig);\n      }\n    }\n\n    // create the connectors and the connector labels\n    connectorGroup = annotations.addGroup(Object.assign(annConfig, groups[1]), dataset);\n    connectorLabelGroup = annotations.addGroup(Object.assign(annConfig, groups[0]), dataset);\n\n    for (i = 0, j = 0; i < length; i++) {\n      if (!validConnector[i]) {\n        continue;\n      }\n      connector = connectorGroup.items[j];\n\n      if (connector) {\n        connector.data('unfilteredConfig', connectorOptions[j]);\n        connector.addEventListener('fc-mouseover', connectors[i].config.onmouseover);\n        connector.addEventListener('fc-mouseout', connectors[i].config.onmouseout);\n        connector.addEventListener('fc-click', connectors[i].config.onclick);\n      }\n      if (connectors[i].labelConfig && showConnectorLabels) {\n        connectorLabel = connectorLabelGroup.items[j];\n        connectorLabel && connectorLabel.data('unfilteredConfig');\n      }\n      j++;\n    }\n    // annotations.addGroup(Object.assign(annConfig, groups[0]));\n    // annotations.addGroup(Object.assign(annConfig, groups[1]));\n  }\n\n  /**\n   * Determines marker shape\n   * @return {Object} prepared marker shape object\n   */\n  getShapeArgs () {\n    let mark = this,\n      config = mark.config,\n      shapeObj = extend2({}, mark.shapeObj),\n      // FMXT-388: work on a copy of the shapeObj so as to not alter the original shapeObj.\n      radius;\n    config.autoScale = 1;\n    if (shapeObj) {\n      if (shapeObj.type === 'polygon') {\n        if (shapeObj.sides < 3) {\n          shapeObj.type = CIRCLE_STR;\n        } else {\n          shapeObj.startangle = config.startAngle;\n        }\n      } else if (shapeObj.type === 'arc') {\n        radius = (shapeObj.radius || config.markerRadius) * config.autoScale;\n        shapeObj.radius = radius;\n\n        shapeObj.innerradius = ((shapeObj.innerradius &&\n                          (shapeObj.innerradius * config.autoScale)) || (radius * INNERRADIUSFACTOR));\n      }\n\n      return shapeObj;\n    }\n    return null;\n  }\n\n  /**\n   * Prepares label object for markers\n   * @param {string} labelPos label position\n   * @param {string} labelPadding padding of a label\n   * @param {Object} options marker configurations\n   * @param {string} width max width\n   * @param {string} height max height\n   * @return {Object}label object need for annotation\n   */\n  _getLabelOptions (labelPos, labelPadding, options, width, height) {\n    let dataset = this,\n      radius,\n      x,\n      y,\n      alignment = labelPos && labelPos.toLowerCase();\n\n    // validate alignments\n    if (!dataset.getLabelAlignment[alignment]) {\n      alignment = CENTER_STR;\n    }\n\n    x = Number(options.x);\n    y = Number(options.y);\n\n    if (width === UNDEF || height === UNDEF) {\n      // not an image\n      radius = options.radius || 0;\n    } else {\n      // image\n      radius = (/^(top|bottom)$/ig.test(alignment) && (height * 0.5)) ||\n                          (/^(left|right)$/ig.test(alignment) && (width * 0.5)) || 0;\n    }\n\n    radius = (Number(radius) + Number(labelPadding));\n    return dataset.getLabelAlignment[alignment](x, y, radius);\n  }\n\n  /**\n   * Add marker item\n   * @param {Object} options configuration of the marker item\n   */\n  addMarkerItem (options) {\n    let markers = this,\n      chart = markers.getFromEnv('chart'),\n      item = options,\n      markerObj,\n      items = markers.components.markerObjs,\n      shapeObjs = markers.components.shapeObjs,\n      markerGroup = markers.components.markerGroup,\n      markerLabelGroup = markers.components.markerLabelGroup,\n      markerConfigOptions,\n      annotations = markers.getChildren('mapAnnotations')[0],\n      numberFormatter = markers.getFromEnv('number-formatter'),\n      markerOptions = chart.config.markerOpts,\n      // markerElem,\n      // markerLabelElem,\n      drawOptions,\n      markerConfig,\n      rawConfig,\n      value,\n      shapeId,\n      id;\n\n    if ((id = item.id.toLowerCase())) {\n      if (items[id]) {\n        return;\n      }\n\n      // Data enabled markers not yet supported by this method.\n      delete item.value;\n      markers.imageLoadCount = 0;\n      markerObj = Markers._initializeMarkerItem(id, item, null);\n      markerObj.dataset = markers;\n      shapeId = markerObj.config.options.shapeid;\n      markerConfig = markerObj.config;\n      value = item.value;\n      markerConfig.cleanValue = numberFormatter.getCleanValue(value);\n      markerConfigOptions = markerConfig.options;\n      if (markerConfig.cleanValue !== null) {\n        markerConfig.formattedValue = numberFormatter.dataLabels(value);\n      } else {\n        markerConfig.formattedValue = UNDEF;\n      }\n      markerConfig.fillColor = pluck(markerConfigOptions.fillcolor, markerConfigOptions.color, markerOptions.fillColor);\n      markerConfig.fillAlpha = pluck(markerConfigOptions.fillalpha, markerConfigOptions.alpha, markerOptions.fillAlpha);\n      markerConfig.fillRatio = pluck(markerConfigOptions.fillratio, markerOptions.fillRatio);\n      markerConfig.fillAngle = pluck(markerConfigOptions.fillangle, markerOptions.fillAngle);\n      markerConfig.borderThickness = pluckNumber(markerConfigOptions.borderthickness, markerOptions.borderThickness);\n      markerConfig.borderColor = pluck(markerConfigOptions.bordercolor, markerOptions.borderColor);\n      markerConfig.borderAlpha = pluck(markerConfigOptions.borderalpha, markerOptions.borderAlpha);\n      markerConfig.labelPadding = (markerConfigOptions.labelpadding || markerOptions.labelPadding);\n      markerConfig.options.tooltext = pluck(markerConfigOptions.tooltext, markerOptions.tooltext);\n      markerConfig.link = markerConfigOptions.link;\n\n      if (shapeId) {\n        markerObj.shapeObj = shapeObjs[shapeId && shapeId.toLowerCase()];\n      }\n\n      items[id] = markerObj;\n      drawOptions = markers._drawMarkerItem(markerObj);\n\n      if (markerGroup && markerLabelGroup) {\n        if (drawOptions.markerShape) {\n          rawConfig = Object.assign({\n            align: 'center',\n            valign: 'middle',\n            animationLabel: 'markerItem',\n            autoscale: drawOptions.markerShape.type === 'image' ? 0 : 1\n          }, drawOptions.markerShape);\n          markerObj.markerShape = annotations.addItem(\n            markerGroup.getId(),\n            rawConfig,\n            markers\n          );\n          markerObj.markerShape.data('unfilteredConfig', rawConfig);\n        }\n        if (drawOptions.markerLabel) {\n          rawConfig = Object.assign({ animationLabel: 'markerItem' }, drawOptions.markerLabel);\n          markerObj.markerLabel = annotations.addItem(\n            markerLabelGroup.getId(),\n            rawConfig,\n            markers\n          );\n          markerObj.markerLabel.data('unfilteredConfig', rawConfig);\n        }\n      }\n\n      markers._buildKdTree();\n    }\n  }\n\n  /**\n   * Updates a marker item\n   * @param {string} id marker item id\n   * @param {Object} options configuration of the marker item\n   */\n  updateMarkerItem (id, options) {\n    let markers = this,\n      chart = markers.getFromEnv('chart'),\n      annotations = markers.getChildren('mapAnnotations')[0],\n      markerObjs = markers.components.markerObjs,\n      markerOptions = chart.config.markerOpts,\n      origOptions,\n      key,\n      markerConfig,\n      optConfig = {},\n      marker = markerObjs[id],\n      annotOptions;\n\n    if (marker) {\n      origOptions = marker.config.options;\n      // Add the marker options passed to the original options to persist in case of multiple updates.\n      extend2(origOptions, options);\n      markers.imageLoadCount = 0;\n      // Get the annotation options from marker options.\n      markerConfig = marker.config;\n      for (key in options) {\n        optConfig[key.toLowerCase()] = options[key] && options[key].toString();\n      }\n      markerConfig.fillColor = pluck(optConfig.fillcolor, optConfig.color, markerOptions.fillColor);\n      markerConfig.fillAlpha = pluck(optConfig.fillalpha, optConfig.alpha, markerOptions.fillAlpha);\n      markerConfig.fillRatio = pluck(optConfig.fillratio, markerOptions.fillRatio);\n      markerConfig.fillAngle = pluck(optConfig.fillangle, markerOptions.fillAngle);\n      markerConfig.borderThickness = pluckNumber(optConfig.borderthickness, markerOptions.borderThickness);\n      markerConfig.borderColor = pluck(optConfig.bordercolor, markerOptions.borderColor);\n      markerConfig.borderAlpha = pluck(optConfig.borderalpha, markerOptions.borderAlpha);\n      markerConfig.labelPadding = (optConfig.labelpadding || markerOptions.labelPadding);\n      markerConfig.options.tooltext = pluck(optConfig.tooltext, markerOptions.tooltext);\n      markerConfig.link = optConfig.link;\n      annotOptions = markers._drawMarkerItem(marker).markerShape;\n\n      markers._buildKdTree();\n\n      // Update annotations\n      annotations.update(id, annotOptions);\n    }\n  }\n\n  createContainer () {\n    let dataset = this,\n      parent = dataset.getLinkedParent(),\n      animationManager = dataset.getFromEnv('animationManager'),\n      pContainer = parent.getChildContainer('layer1');\n\n    !dataset.getChildContainer('abovePlotGroup') && dataset.addChildContainer('abovePlotGroup',\n      animationManager.setAnimation({\n        el: 'group',\n        attr: {\n          name: 'abovePlotGroup',\n          opacity: 1\n        },\n        container: pContainer,\n        component: dataset,\n        label: 'group'\n      }));\n\n    !dataset.getChildContainer('belowPlotGroup') && dataset.addChildContainer('belowPlotGroup',\n      animationManager.setAnimation({\n        el: 'group',\n        attr: {\n          name: 'belowPlotGroup',\n          opacity: 1\n        },\n        container: pContainer,\n        component: dataset,\n        label: 'group'\n      }));\n  }\n\n  /**\n   * Remove a marker item\n   * @param {string} id marker item id\n   */\n  _removeMarkerItem (id) {\n    let markers = this,\n      components = markers.components,\n      markerObjs = components.markerObjs,\n      markerObj = markerObjs[id],\n      kdArrayMap = components.kdArrayMap,\n      annotations = markers.getChildren('mapAnnotations')[0],\n      markerShape,\n      markerLabel;\n\n    if (markerObj) {\n      markerShape = markerObj.markerShape;\n      markerLabel = markerObj.markerLabel;\n      markerShape && annotations.destroy(markerShape.getId());\n      markerLabel && annotations.destroy(markerLabel.getId());\n      delete kdArrayMap[id];\n      markers._buildKdTree();\n    }\n\n    delete markerObjs[id];\n  }\n\n  /**\n   * Return nearest marker element on mouse hover\n   * @param {Object|boolean} point point object of mouse coordinate\n   * @return {Object} marker element graphics\n   */\n  getElement (point) {\n    let datasetObj = this;\n    if (datasetObj.components.kDTree) {\n      // searches the neighbouring points using the kdtree instance.\n      return datasetObj.components.kDTree.getNeighbour(point);\n    }\n  }\n}\n\nexport default Markers;\n","/* eslint require-jsdoc: 'error', valid-jsdoc: [\"error\", { \"requireReturn\": false }] */\nimport {ComponentInterface} from '@fusioncharts/core/src/component-interface';\nimport { hasSVG } from '@fusioncharts/core/src/lib';\nimport { addDep } from '@fusioncharts/core/src/dependency-manager';\nimport mapsAnimation from '../_internal/map-entities.animation';\n\nlet configureChildren = (child) => {\n  child.configure && child.configure();\n};\naddDep({\n  name: 'mapsAnimation',\n  type: 'animationRule',\n  extension: mapsAnimation\n});\n/**\n * Class to create Maps group\n */\nclass MapGroup extends ComponentInterface {\n  /**\n   * Returns type of chart\n   * @return {string} class type\n   */\n  getType () {\n    return 'group';\n  }\n\n  /**\n   * Sets the name of the component\n   * @return {string} name\n   */\n  getName () {\n    return 'mapGroup';\n  }\n  /**\n   * function to configure this manager\n   */\n  configure () {\n    let manager = this;\n    manager._mapChildren(configureChildren);\n  }\n  /**\n   * Create child containers\n   */\n  createContainer () {\n    let manager = this,\n      parent = manager.getLinkedParent(),\n      animationManager = manager.getFromEnv('animationManager'),\n      pContainer,\n      parentChildContainers = parent.getChildContainer();\n\n    pContainer = parentChildContainers.plotGroup;\n\n    !manager.getChildContainer('plotShadow') && manager.addChildContainer('plotShadow',\n      animationManager.setAnimation({\n        el: 'group',\n        attr: {\n          name: 'manager-plot-shadow',\n          opacity: 1\n        },\n        container: pContainer,\n        component: manager,\n        label: 'group'\n      }));\n\n    !manager.getChildContainer('plot') && manager.addChildContainer('plot',\n      animationManager.setAnimation({\n        el: 'group',\n        attr: {\n          name: 'manager-plot',\n          opacity: 1\n        },\n        container: pContainer,\n        component: manager,\n        label: 'group'\n      }));\n\n    !manager.getChildContainer('layer0') && manager.addChildContainer('layer0',\n      animationManager.setAnimation({\n        el: 'group',\n        attr: {\n          name: 'ann-layer0',\n          opacity: 1\n        },\n        container: parentChildContainers.abovePlotGroup,\n        component: manager,\n        label: 'group'\n      }));\n\n    !manager.getChildContainer('layer1') && manager.addChildContainer('layer1',\n      animationManager.setAnimation({\n        el: 'group',\n        attr: {\n          name: 'ann-layer1',\n          opacity: 1\n        },\n        container: parentChildContainers.abovePlotGroup,\n        component: manager,\n        label: 'group'\n      }));\n\n    if (parent.config.labelsOnTop) {\n      manager.getChildContainer('layer0').toFront();\n    } else {\n      manager.getChildContainer('layer0').toBack();\n    }\n  }\n\n  /**\n   * Transforms entity group\n   */\n  _transformGroup () {\n    let manager = this,\n      chart = this.getFromEnv('chart'),\n      chartInstance = chart.getFromEnv('chartInstance'),\n      animationManager = manager.getFromEnv('animationManager'),\n      // dataset = chart.getDatasets(),\n      jsonData = chart.jsonData,\n      plotGroup = manager.getChildContainer('plot'),\n      plotShadowGroup = manager.getChildContainer('plotShadow'),\n      scalingParams = chart.config.scalingParams,\n      transformGroup = function () {\n        return function (event) { // eslint-disable-line good-practices/no-function-dependency\n          // let clickedElemScaleParams,\n          // transformStr,\n          // clickedElementBox;\n          event.detachHandler(); // one time\n          if (hasSVG) {\n            if (chartInstance.args.link &&\n                chartInstance.args.clickedEntityBox &&\n                jsonData.chart.linkedcharttransition === 'scale') {\n              // clickedElementBox = chartInstance.args.clickedEntityBox;\n              // clickedElemScaleParams = chart.getScalingParameters(\n              //   chart.baseWidth,\n              //   chart.baseHeight,\n              //   clickedElementBox.width,\n              //   clickedElementBox.height);\n              // transformStr = ['t',\n              //   clickedElementBox.x,\n              //   ',',\n              //   clickedElementBox.y,\n              //   's',\n              //   clickedElemScaleParams.scaleFactor,\n              //   ',',\n              //   clickedElemScaleParams.scaleFactor,\n              //   ',0,0'].join('');\n\n              // plotGroup && animationManager.setAnimation({\n              //   el: plotGroup,\n              //   attr: {\n              //     transform: transformStr\n              //   },\n              //   component: manager,\n              //   state: 'appearing',\n              //   label: 'group'\n              // });\n\n              // // plotGroup && plotGroup.attr({\n              // //   transform: transformStr\n              // // });\n\n              // plotShadowGroup && animationManager.setAnimation({\n              //   el: plotShadowGroup,\n              //   attr: {\n              //     transform: transformStr\n              //   },\n              //   component: manager,\n              //   state: 'appearing',\n              //   label: 'group'\n              // });\n\n              plotGroup && animationManager.setAnimation({\n                el: plotGroup,\n                attr: {\n                  transform: scalingParams.transformStr\n                },\n                component: manager,\n                label: 'group'\n              });\n\n              plotShadowGroup && animationManager.setAnimation({\n                el: plotShadowGroup,\n                attr: {\n                  transform: scalingParams.transformStr\n                },\n                component: manager,\n                label: 'group'\n              });\n\n              // plotShadowGroup && plotShadowGroup.attr({\n              //   transform: transformStr\n              // });\n\n              // plotGroup && plotGroup.attr({\n              //   transform: scalingParams.transformStr\n              // });\n              // plotShadowGroup && plotShadowGroup.attr({\n              //   transform: scalingParams.transformStr\n              // });\n            } else {\n              plotGroup && animationManager.setAnimation({\n                el: plotGroup,\n                attr: {\n                  transform: scalingParams.transformStr\n                },\n                component: manager,\n                label: 'group'\n              });\n              // plotGroup && plotGroup.attr({\n              //   transform: scalingParams.transformStr\n              // });\n              plotShadowGroup && animationManager.setAnimation({\n                el: plotShadowGroup,\n                attr: {\n                  transform: scalingParams.transformStr\n                },\n                component: manager,\n                label: 'group'\n              });\n              // plotShadowGroup && plotShadowGroup.attr({\n              //   transform: scalingParams.transformStr\n              // });\n            }\n          }\n          // Show the dataset's shadow layers for both VML and SVG\n          plotGroup.show();\n          plotShadowGroup.show();\n        };\n      };\n      // i;\n\n    // Initially set the opacity of the shadow group to zero\n    // plotShadowGroup.attr({\n    //   opacity: 0\n    // });\n\n    // plotShadowGroup && animationManager.setAnimation({\n    //   el: plotShadowGroup,\n    //   attr: {\n    //     opacity: 0\n    //   },\n    //   component: manager,\n    //   state: 'appearing',\n    //   label: 'group'\n    // });\n\n    plotGroup.hide();\n    plotShadowGroup.hide();\n    chart.config.entitiesReady = false;\n    chartInstance.addEventListener('internal.mapdrawingcomplete', transformGroup());\n    chart.checkComplete();\n  }\n  /**\n   * function call sync draw of its children\n   */\n  draw () {\n    this.createContainer();\n    this._transformGroup();\n  }\n  /**\n   * function to get data limits from its child datasets\n   * return minimun and maximum value among the datasets limit\n   * @param {boolean} allVisible  whether consider all the datasets are visible or not\n   * @return {Object}             [min, max]\n   */\n  getDataLimits (allVisible) {\n    let manager = this,\n      min = +Infinity,\n      max = -Infinity,\n      maxminObj,\n      numOfColumns = 0,\n      getMaxMin = function (_maxminObj) {\n        max = Math.max(max, _maxminObj.max);\n        min = Math.min(min, _maxminObj.min);\n      };\n\n    manager._mapChildren((child) => {\n      if (child.getState('removed') || (child.getState('visible') === false)) {\n        if (allVisible) {\n          maxminObj = child.getDataLimits(allVisible);\n          getMaxMin(maxminObj);\n        }\n        return;\n      }\n      numOfColumns++;\n      maxminObj = child.getDataLimits(allVisible);\n      getMaxMin(maxminObj);\n    });\n    if (!numOfColumns) {\n      manager.setState('visible', false);\n    } else {\n      manager.setState('visible', true);\n    }\n    if (!this.config.range) {\n      this.config.range = {};\n      this.config.range.min = this.config.dataMin;\n      this.config.range.max = this.config.dataMax;\n    }\n    return { max, min };\n  }\n}\nexport default MapGroup;\n"],"sourceRoot":""}